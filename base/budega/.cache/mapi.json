{
    "title": "@budega: Gerencie a fila de espera e atendimento",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@budega: Gerencie a fila de espera e atendimento</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Gerencie a fila de espera e atendimento</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#answers\">Answers</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/budega/cover.jpg\" /></p>\n<h2>Intro</h2>\n<p>Este \u00e9 um projeto de modelagem e implementa\u00e7\u00e3o de um mercantil, que simula o funcionamento de caixas de atendimento e uma fila de espera. Para isso, ser\u00e3o implementadas duas classes principais: Pessoa <code>Person</code> e Mercado <code>Market</code>.</p>\n<ul>\n<li>A classe <code>Market</code> representa o estabelecimento, com atributos como caixas de atendimento <code>counters</code> e uma fila de espera de clientes <code>wainting</code>.</li>\n<li>Os caixas <code>counters</code> s\u00e3o modelados como um vetor de clientes de tamanho fixo. Uma posi\u00e7\u00e3o do caixa ter\u00e1 o valor <code>null</code> para indicar que o caixa est\u00e1 vazio ou ter\u00e1 um objeto cliente.<ul>\n<li>typescript: <code>counters: (Person | null)[]</code></li>\n<li>java: <code>ArrayList&lt;Person&gt; counters</code></li>\n<li>cpp: <code>vector&lt;Person*&gt; counters</code></li>\n</ul>\n</li>\n<li>A fila de espera <code>queue</code> \u00e9 uma lista de clientes de tamanho vari\u00e1vel. Todo cliente que chega \u00e9 inserido no final da fila. Todo cliente que \u00e9 chamado para um caixa \u00e9 removido do in\u00edcio da fila.<ul>\n<li>typescript: <code>waiting: Person[]</code></li>\n<li>java: <code>LinkedList&lt;Person&gt; waiting</code></li>\n<li>cpp: <code>list&lt;Person*&gt; waiting</code></li>\n</ul>\n</li>\n<li>As opera\u00e7\u00f5es principais incluem chegar cliente <code>arrive</code>, chamar no caixa <code>call</code> e finalizar atendimento <code>finish</code>.</li>\n<li>As opera\u00e7\u00f5es \"b\u00f4nus\" s\u00e3o furar fila <code>cutInLine</code> e abandonar fila de espera <code>giveup</code>.</li>\n</ul>\n<h3>Comandos</h3>\n<p>Todos os comandos seguem o modelo <code>$comando arg1 arg2 ...</code>. Em caso de erro, uma mensagem adequada deve ser impressa.</p>\n<ul>\n<li><code>$show</code> - Mostra o estado atual do mercantil, incluindo os clientes nos caixas e na fila de espera.</li>\n<li><code>$init</code> - Reinicia o estado do mercantil, definindo a quantidade de caixas e limpando a fila de espera.</li>\n<li><code>$enter</code> - Adiciona um cliente \u00e0 fila de espera. Deve ser seguido pelo nome do cliente.</li>\n<li><code>$call</code> - Chama o pr\u00f3ximo cliente na fila de espera para um caixa dispon\u00edvel. Deve ser seguido pelo n\u00famero do caixa.</li>\n<li><code>$finish</code> - Finaliza o atendimento de um cliente em um caixa. Deve ser seguido pelo n\u00famero do caixa.</li>\n</ul>\n<h2>Guide</h2>\n<p><img alt=\"diagrama\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/budega/diagrama.png\" /></p>\n<p><a href=\"https://youtu.be/5-GqCN0VPpQ?si=SkROsibr5OC4tdnZ\"><img alt=\"youtube icon\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/animal/../youguide.png\" /></a></p>\n<h3>Parte 1: Classe Cliente</h3>\n<ul>\n<li>Crie a classe <code>Cliente</code> com os atributos <code>nome</code>.</li>\n<li>Defina os atributos como privados.</li>\n<li>Crie o construtor da classe que recebe o <code>nome</code> como uma string.</li>\n<li>Crie o m\u00e9todo <code>getNome()</code> para retornar o nome do cliente.</li>\n<li>Crie o m\u00e9todo <code>toString()</code> para retornar uma string no formato \"nome\".</li>\n</ul>\n<h3>Parte 2: Classe Mercantil</h3>\n<h4>Construtor</h4>\n<ul>\n<li>Implemente o construtor da classe <code>Market</code>, que recebe a quantidade de caixas como par\u00e2metro.</li>\n<li>Inicialize os atributos da classe, incluindo o vetor de caixas e a fila de espera.</li>\n<li>Preencha o vetor de caixas com <code>null</code> para indicar que todos os caixas est\u00e3o vazios.</li>\n</ul>\n<h4>M\u00e9todo <code>toString()</code></h4>\n<ul>\n<li>Implemente o m\u00e9todo <code>toString()</code> para retornar uma representa\u00e7\u00e3o em string do estado atual do mercantil. Exemplo</li>\n</ul>\n<div class=\"language-text highlight\"><pre><span></span><code>Caixas: [-----, -----]\nEspera: [carla, maria, rubia]\n</code></pre></div>\n<ul>\n<li>Pesquise na sua linguagem e aprenda a utilizar os m\u00e9todos map, join se existirem.</li>\n<li>Use a fun\u00e7\u00e3o <code>map()</code> para percorrer o vetor de caixas e a fila de espera e criar uma string que represente cada caixa e cada cliente na fila.</li>\n<li>Utilize if e else ou operador tern\u00e1rio para verificar se cada caixa est\u00e1 vazio ou ocupado e ajustar a representa\u00e7\u00e3o de acordo.</li>\n<li>Junte as strings individuais de cada caixa e da fila de espera usando o m\u00e9todo <code>join()</code> para criar uma representa\u00e7\u00e3o coerente do estado do mercantil.</li>\n<li>Retorne a string resultante.</li>\n</ul>\n<h3>Parte 3: Chegar</h3>\n<ul>\n<li>Na classe <code>Market</code>, crie o m\u00e9todo <code>arrive(person: Person): void</code> que permite que uma pessoa chegue na fila de espera.</li>\n<li>Adicione a pessoa ao final da fila de espera.</li>\n</ul>\n<h3>Parte 4: Chamar Cliente</h3>\n<ul>\n<li>Na classe <code>Market</code>, crie o m\u00e9todo <code>call(index: number): void</code> que permite chamar o primeiro cliente da lista de espera para ser atendido em um caixa espec\u00edfico.</li>\n<li>Se n\u00e3o houver ningu\u00e9m na fila de espera, emita a mensagem de erro \"fail: sem clientes\".</li>\n<li>Se o caixa estiver ocupado, imprima a mensagem de erro \"fail: caixa ocupado\".</li>\n</ul>\n<h3>Parte 5: Finalizar Atendimento</h3>\n<ul>\n<li>Na classe <code>Market</code>, crie o m\u00e9todo <code>finish(index: number): Pessoa | null</code> que permite finalizar o atendimento de um cliente em um caixa espec\u00edfico.</li>\n<li>Verifique se o \u00edndice do caixa \u00e9 v\u00e1lido e, se n\u00e3o for, emita a mensagem de erro <code>fail: caixa inexistente</code>.</li>\n<li>Verifique se h\u00e1 algu\u00e9m sendo atendido no caixa. Se n\u00e3o houver, emita a mensagem de erro <code>fail: caixa vazio</code>.</li>\n<li>Retorne o cliente que foi atendido e libere o caixa, definindo-o como null.</li>\n</ul>\n<h2>Answers</h2>\n<p><a href=\"https://youtu.be/Z7karsbg1ok\"><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/budega/../../wiki/images/resolucao.png\" /></a></p>\n<h2>Shell</h2>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE iniciar</span>\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$show</span>\nCaixas:<span class=\"w\"> </span><span class=\"o\">[</span>-----,<span class=\"w\"> </span>-----<span class=\"o\">]</span>\nEspera:<span class=\"w\"> </span><span class=\"o\">[]</span>\n\n<span class=\"c1\">#TEST_CASE arrive</span>\n\n<span class=\"nv\">$arrive</span><span class=\"w\"> </span>carla\n<span class=\"nv\">$arrive</span><span class=\"w\"> </span>maria\n<span class=\"nv\">$arrive</span><span class=\"w\"> </span>rubia\n\n<span class=\"nv\">$show</span>\nCaixas:<span class=\"w\"> </span><span class=\"o\">[</span>-----,<span class=\"w\"> </span>-----<span class=\"o\">]</span>\nEspera:<span class=\"w\"> </span><span class=\"o\">[</span>carla,<span class=\"w\"> </span>maria,<span class=\"w\"> </span>rubia<span class=\"o\">]</span>\n\n<span class=\"c1\">#TEST_CASE call</span>\n\n<span class=\"nv\">$call</span><span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"nv\">$show</span>\nCaixas:<span class=\"w\"> </span><span class=\"o\">[</span>carla,<span class=\"w\"> </span>-----<span class=\"o\">]</span>\nEspera:<span class=\"w\"> </span><span class=\"o\">[</span>maria,<span class=\"w\"> </span>rubia<span class=\"o\">]</span>\n\n<span class=\"c1\">#TEST_CASE finish</span>\n\n<span class=\"nv\">$finish</span><span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"nv\">$show</span>\nCaixas:<span class=\"w\"> </span><span class=\"o\">[</span>-----,<span class=\"w\"> </span>-----<span class=\"o\">]</span>\nEspera:<span class=\"w\"> </span><span class=\"o\">[</span>maria,<span class=\"w\"> </span>rubia<span class=\"o\">]</span>\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE iniciar2</span>\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\nCaixas:<span class=\"w\"> </span><span class=\"o\">[</span>-----,<span class=\"w\"> </span>-----,<span class=\"w\"> </span>-----<span class=\"o\">]</span>\nEspera:<span class=\"w\"> </span><span class=\"o\">[]</span>\n\n<span class=\"nv\">$arrive</span><span class=\"w\"> </span>carla\n<span class=\"nv\">$arrive</span><span class=\"w\"> </span>maria\n\n<span class=\"nv\">$show</span>\nCaixas:<span class=\"w\"> </span><span class=\"o\">[</span>-----,<span class=\"w\"> </span>-----,<span class=\"w\"> </span>-----<span class=\"o\">]</span>\nEspera:<span class=\"w\"> </span><span class=\"o\">[</span>carla,<span class=\"w\"> </span>maria<span class=\"o\">]</span>\n\n<span class=\"c1\">#TEST_CASE call</span>\n\n<span class=\"nv\">$call</span><span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"nv\">$call</span><span class=\"w\"> </span><span class=\"m\">0</span>\nfail:<span class=\"w\"> </span>caixa<span class=\"w\"> </span>ocupado\n<span class=\"nv\">$show</span>\nCaixas:<span class=\"w\"> </span><span class=\"o\">[</span>carla,<span class=\"w\"> </span>-----,<span class=\"w\"> </span>-----<span class=\"o\">]</span>\nEspera:<span class=\"w\"> </span><span class=\"o\">[</span>maria<span class=\"o\">]</span>\n\n<span class=\"c1\">#TEST_CASE empty waiting</span>\n\n<span class=\"nv\">$call</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$show</span>\nCaixas:<span class=\"w\"> </span><span class=\"o\">[</span>carla,<span class=\"w\"> </span>-----,<span class=\"w\"> </span>maria<span class=\"o\">]</span>\nEspera:<span class=\"w\"> </span><span class=\"o\">[]</span>\n\n<span class=\"c1\">#TEST_CASE empty waiting</span>\n\n<span class=\"nv\">$call</span><span class=\"w\"> </span><span class=\"m\">1</span>\nfail:<span class=\"w\"> </span>sem<span class=\"w\"> </span>clientes\n\n<span class=\"c1\">#TEST_CASE finish</span>\n\n<span class=\"nv\">$finish</span><span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"nv\">$show</span>\nCaixas:<span class=\"w\"> </span><span class=\"o\">[</span>-----,<span class=\"w\"> </span>-----,<span class=\"w\"> </span>maria<span class=\"o\">]</span>\nEspera:<span class=\"w\"> </span><span class=\"o\">[]</span>\n\n<span class=\"nv\">$finish</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$show</span>\nCaixas:<span class=\"w\"> </span><span class=\"o\">[</span>-----,<span class=\"w\"> </span>-----,<span class=\"w\"> </span>-----<span class=\"o\">]</span>\nEspera:<span class=\"w\"> </span><span class=\"o\">[]</span>\n\n<span class=\"c1\">#TEST_CASE error</span>\n\n<span class=\"nv\">$finish</span><span class=\"w\"> </span><span class=\"m\">3</span>\nfail:<span class=\"w\"> </span>caixa<span class=\"w\"> </span>inexistente\n<span class=\"nv\">$finish</span><span class=\"w\"> </span><span class=\"m\">1</span>\nfail:<span class=\"w\"> </span>caixa<span class=\"w\"> </span>vazio\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/budega/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>go<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/budega/.cache/draft/go/shell.go\">shell.go</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/budega/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/budega/.cache/draft/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT iniciar\ninit 2\nshow\nend\n======== EXPECT\n$init 2\n$show\nCaixas: [-----, -----]\nEspera: []\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT arrive\ninit 2\nshow\narrive carla\narrive maria\narrive rubia\nshow\nend\n======== EXPECT\n$init 2\n$show\nCaixas: [-----, -----]\nEspera: []\n$arrive carla\n$arrive maria\n$arrive rubia\n$show\nCaixas: [-----, -----]\nEspera: [carla, maria, rubia]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT call\ninit 2\nshow\narrive carla\narrive maria\narrive rubia\nshow\ncall 0\nshow\nend\n======== EXPECT\n$init 2\n$show\nCaixas: [-----, -----]\nEspera: []\n$arrive carla\n$arrive maria\n$arrive rubia\n$show\nCaixas: [-----, -----]\nEspera: [carla, maria, rubia]\n$call 0\n$show\nCaixas: [carla, -----]\nEspera: [maria, rubia]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT finish\ninit 2\nshow\narrive carla\narrive maria\narrive rubia\nshow\ncall 0\nshow\nfinish 0\nshow\nend\n======== EXPECT\n$init 2\n$show\nCaixas: [-----, -----]\nEspera: []\n$arrive carla\n$arrive maria\n$arrive rubia\n$show\nCaixas: [-----, -----]\nEspera: [carla, maria, rubia]\n$call 0\n$show\nCaixas: [carla, -----]\nEspera: [maria, rubia]\n$finish 0\n$show\nCaixas: [-----, -----]\nEspera: [maria, rubia]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT iniciar2\ninit 3\nshow\narrive carla\narrive maria\nshow\nend\n======== EXPECT\n$init 3\n$show\nCaixas: [-----, -----, -----]\nEspera: []\n$arrive carla\n$arrive maria\n$show\nCaixas: [-----, -----, -----]\nEspera: [carla, maria]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT call\ninit 3\nshow\narrive carla\narrive maria\nshow\ncall 0\ncall 0\nshow\nend\n======== EXPECT\n$init 3\n$show\nCaixas: [-----, -----, -----]\nEspera: []\n$arrive carla\n$arrive maria\n$show\nCaixas: [-----, -----, -----]\nEspera: [carla, maria]\n$call 0\n$call 0\nfail: caixa ocupado\n$show\nCaixas: [carla, -----, -----]\nEspera: [maria]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT empty waiting\ninit 3\nshow\narrive carla\narrive maria\nshow\ncall 0\ncall 0\nshow\ncall 2\nshow\nend\n======== EXPECT\n$init 3\n$show\nCaixas: [-----, -----, -----]\nEspera: []\n$arrive carla\n$arrive maria\n$show\nCaixas: [-----, -----, -----]\nEspera: [carla, maria]\n$call 0\n$call 0\nfail: caixa ocupado\n$show\nCaixas: [carla, -----, -----]\nEspera: [maria]\n$call 2\n$show\nCaixas: [carla, -----, maria]\nEspera: []\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT empty waiting\ninit 3\nshow\narrive carla\narrive maria\nshow\ncall 0\ncall 0\nshow\ncall 2\nshow\ncall 1\nend\n======== EXPECT\n$init 3\n$show\nCaixas: [-----, -----, -----]\nEspera: []\n$arrive carla\n$arrive maria\n$show\nCaixas: [-----, -----, -----]\nEspera: [carla, maria]\n$call 0\n$call 0\nfail: caixa ocupado\n$show\nCaixas: [carla, -----, -----]\nEspera: [maria]\n$call 2\n$show\nCaixas: [carla, -----, maria]\nEspera: []\n$call 1\nfail: sem clientes\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT finish\ninit 3\nshow\narrive carla\narrive maria\nshow\ncall 0\ncall 0\nshow\ncall 2\nshow\ncall 1\nfinish 0\nshow\nfinish 2\nshow\nend\n======== EXPECT\n$init 3\n$show\nCaixas: [-----, -----, -----]\nEspera: []\n$arrive carla\n$arrive maria\n$show\nCaixas: [-----, -----, -----]\nEspera: [carla, maria]\n$call 0\n$call 0\nfail: caixa ocupado\n$show\nCaixas: [carla, -----, -----]\nEspera: [maria]\n$call 2\n$show\nCaixas: [carla, -----, maria]\nEspera: []\n$call 1\nfail: sem clientes\n$finish 0\n$show\nCaixas: [-----, -----, maria]\nEspera: []\n$finish 2\n$show\nCaixas: [-----, -----, -----]\nEspera: []\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT error\ninit 3\nshow\narrive carla\narrive maria\nshow\ncall 0\ncall 0\nshow\ncall 2\nshow\ncall 1\nfinish 0\nshow\nfinish 2\nshow\nfinish 3\nfinish 1\nend\n======== EXPECT\n$init 3\n$show\nCaixas: [-----, -----, -----]\nEspera: []\n$arrive carla\n$arrive maria\n$show\nCaixas: [-----, -----, -----]\nEspera: [carla, maria]\n$call 0\n$call 0\nfail: caixa ocupado\n$show\nCaixas: [carla, -----, -----]\nEspera: [maria]\n$call 2\n$show\nCaixas: [carla, -----, maria]\nEspera: []\n$call 1\nfail: sem clientes\n$finish 0\n$show\nCaixas: [-----, -----, maria]\nEspera: []\n$finish 2\n$show\nCaixas: [-----, -----, -----]\nEspera: []\n$finish 3\nfail: caixa inexistente\n$finish 1\nfail: caixa vazio\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\nfunction main() {\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        var par = line.split(\" \");\n        var cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"show\") { \n        } else if (cmd == \"init\") { \n            // const nCaixas = parseInt(par[1]);\n        } else if (cmd == \"arrive\") { \n            // const nome = par[1];\n        } else if (cmd == \"call\") { \n            // const index = parseInt(par[1]);\n        } else if (cmd == \"finish\") { \n            // const index = parseInt(par[1]);\n        } else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\nmain() \n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\n\n\nclass Shell {\n    public static void main(String[] _args) {\n        while(true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"init\")) { \n                // var qtd_caixas = Integer.parseInt(par[1]);\n            }\n            else if (cmd.equals(\"show\")) { \n            }\n            else if (cmd.equals(\"arrive\")) { \n                // var nome = par[1];\n            }\n            else if (cmd.equals(\"call\")) { \n                // var indice = Integer.parseInt(par[1]);\n            }\n            else if (cmd.equals(\"finish\")) { \n                // var indice = Integer.parseInt(par[1]);\n            }\n            else {\n                System.out.println(\"fail: comando invalido\");\n\n            }\n        }\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <list>\n#include <memory>\n#include <sstream>\n#include <utility>\nusing namespace std;\n\n\n// Fun\u00e7\u00e3o auxiliar para mapear e juntar elementos de um container\ntemplate <typename CONTAINER, typename FUNC>\nauto map_join(const CONTAINER& c, FUNC f, const string& sep = \", \") {\n    stringstream ss;\n    for (auto it = c.begin(); it != c.end(); ++it) {\n        ss << (it != c.begin() ? sep : \"\") << f(*it);\n    }\n    return ss.str();\n}\n\nint main() {\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"show\") { \n        } else if (cmd == \"init\") { \n            // int qtd_caixas;\n            // ss >> qtd_caixas;\n        } else if (cmd == \"arrive\") { \n            // string nome;\n            // ss >> nome;\n        } else if (cmd == \"call\") { \n            // int indice;\n            // ss >> indice;\n        } else if (cmd == \"finish\") { \n            // int indice;\n            // ss >> indice;\n        } else {\n            cout << \"fail: comando invalido\\n\";\n        }\n    }\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "shell.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\tfor {\n\t\tif !scanner.Scan() { // read line and store in scanner buffer\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text() // get the line from the scanner buffer into a string\n\t\tfmt.Println(\"$\" + line)\n\n\t\tparts := strings.Fields(line)\n\t\tcmd := parts[0]\n\n\t\tswitch cmd {\n\t\tcase \"end\":\n\t\t\tbreak\n\t\tcase \"show\":\n\t\tcase \"init\":\n\t\t\tqtd, _ := strconv.Atoi(parts[1])\n\t\t\t_ = qtd\n\t\tcase \"arrive\":\n\t\t\tname := parts[1]\n\t\t\t_ = name\n\t\tcase \"call\":\n\t\t\tindex, _ := strconv.Atoi(parts[1])\n\t\t\t_ = index\n\t\tcase \"finish\":\n\t\t\tindex, _ := strconv.Atoi(parts[1])\n\t\t\t_ = index\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
