{
    "title": "@cofre: Seu porquinho cresceu",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@cofre: Seu porquinho cresceu</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Seu porquinho cresceu</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cofre/cover.jpg\" /></p>\n<h2>Intro</h2>\n<p>O sistema dever\u00e1:</p>\n<ul>\n<li>Gerenciar um cofrinho do tipo Porquinho capaz de guardar moedas e itens.</li>\n<li>As moedas devem ser criadas atrav\u00e9s de uma <code>enum</code>.</li>\n<li>Ambos moedas e itens deve implementar a Interaface <code>Valuable</code>.</li>\n<li>O volume do cofre incrementa conforme ele recebe itens e moedas.</li>\n<li>A l\u00f3gica da utiliza\u00e7\u00e3o do cofre \u00e9:<ul>\n<li>Para inserir moedas e itens, o cofre deve estar inteiro.</li>\n<li>Para obter moedas e itens, o cofre deve estar quebrado.</li>\n<li>Ao quebrar, o volume do porco deve ser zerado e o status de broken deve ser alterado para <code>true</code>.</li>\n<li>Ao obter moedas e itens, voc\u00ea deve retornar os objetos armazenados.</li>\n<li>Calcular o valor e o volume atual do porco deve ser feito atrav\u00e9s do m\u00e9todo getValue() e getVolume().</li>\n<li>Moedas e Itens devem ser armazenados em uma mesma lista de Valuables.</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h2>Draft</h2>\n<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/cofre/.cache/draft.java\">draft.java</a></li>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/cofre/.cache/draft.cpp\">draft.cpp</a></li>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/cofre/.cache/draft.ts\">draft.ts</a></li>\n</ul>\n<h2>Guide</h2>\n<p><img alt=\"diagrama\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cofre/diagrama.png\" /></p>\n<p><a href=\"https://youtu.be/vzGO1V1nGpY?si=mZZ9da229M9KTf3b\"><img alt=\"youtube icon\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cofre/..//yousolver.png\" /></a></p>\n<!-- load diagrama.puml fenced=ts:filter -->\n\n<div class=\"language-ts highlight\"><pre><span></span><code><span class=\"kd\">@startuml</span>\n\n<span class=\"nx\">skinparam</span><span class=\"w\"> </span><span class=\"nx\">defaultFontName</span><span class=\"w\"> </span><span class=\"s2\">&quot;Source Code Pro&quot;</span>\n<span class=\"nx\">skinparam</span><span class=\"w\"> </span><span class=\"nx\">dpi</span><span class=\"w\"> </span><span class=\"mf\">150</span>\n\n\n\n<span class=\"o\">~</span><span class=\"kd\">interface</span><span class=\"w\"> </span><span class=\"nx\">Valuable</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">getLabel</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"k\">abstract</span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">getValue</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kr\">double</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"k\">abstract</span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">getVolume</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kr\">int</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"k\">abstract</span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"nx\">__</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">toString</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">enum</span><span class=\"w\"> </span><span class=\"nx\">Coin</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">M10</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"k\">static</span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">M100</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"k\">static</span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">M25</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"k\">static</span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">M50</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"k\">static</span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">label</span><span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">String</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">value</span><span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">double</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">volume</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">int</span>\n<span class=\"w\">  </span><span class=\"nx\">__</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">getLabel</span><span class=\"p\">()</span><span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">getValue</span><span class=\"p\">()</span><span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kr\">double</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">getVolume</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kr\">int</span>\n<span class=\"w\">  </span><span class=\"nx\">__</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">toString</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"nx\">Item</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">label</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">String</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">value</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">double</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">volume</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">int</span>\n<span class=\"w\">  </span><span class=\"nx\">__</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Item</span><span class=\"p\">(</span><span class=\"nx\">label</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">volume</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">value</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">double</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"nx\">__</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">getLabel</span><span class=\"p\">()</span><span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">getValue</span><span class=\"p\">()</span><span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kr\">double</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">getVolume</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kr\">int</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">setLabel</span><span class=\"p\">(</span><span class=\"nx\">label</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">String</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">setVolume</span><span class=\"p\">(</span><span class=\"nx\">volume</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"nx\">__</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">toString</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"nx\">Pig</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">broken</span><span class=\"w\">    </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">boolean</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">valuables</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nx\">Valuable</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">volumeMax</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">int</span>\n<span class=\"w\">  </span><span class=\"nx\">__</span>\n\n<span class=\"w\">  </span><span class=\"s1\">&#39; inicializa as variaveis</span>\n<span class=\"s1\">  + Pig(volumeMax  : int)</span>\n\n<span class=\"s1\">  &#39;</span><span class=\"w\"> </span><span class=\"nx\">verifica</span><span class=\"w\"> </span><span class=\"nx\">se</span><span class=\"w\"> </span><span class=\"nx\">ainda</span><span class=\"w\"> </span><span class=\"nx\">cabe</span><span class=\"w\"> </span><span class=\"nx\">e</span><span class=\"w\"> </span><span class=\"nx\">se</span><span class=\"w\"> </span><span class=\"nx\">couber</span>\n<span class=\"w\">  </span><span class=\"s1\">&#39; adiciona o elemento no final da lista</span>\n<span class=\"s1\">  + addValuable(valuable : Valuable) : boolean</span>\n\n<span class=\"s1\">  &#39;</span><span class=\"w\"> </span><span class=\"nx\">quebra</span><span class=\"w\"> </span><span class=\"nx\">se</span><span class=\"w\"> </span><span class=\"nx\">j\u00e1</span><span class=\"w\"> </span><span class=\"nx\">n\u00e3o</span><span class=\"w\"> </span><span class=\"nx\">estiver</span><span class=\"w\"> </span><span class=\"nx\">quebrado</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">breakPig</span><span class=\"p\">()</span><span class=\"w\">     </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">boolean</span>\n<span class=\"w\">  </span><span class=\"nx\">__</span>\n\n<span class=\"w\">  </span><span class=\"s1\">&#39; se estiver quebrado</span>\n<span class=\"s1\">  &#39;</span><span class=\"w\"> </span><span class=\"nx\">pega</span><span class=\"w\"> </span><span class=\"nx\">apenas</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nx\">moedas</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">retira</span><span class=\"o\">-</span><span class=\"kr\">as</span>\n<span class=\"w\">  </span><span class=\"s1\">&#39; da lista de valuables e as retorna</span>\n<span class=\"s1\">  + getCoins()     : List&lt;Coin&gt;</span>\n\n<span class=\"s1\">  &#39;</span><span class=\"w\"> </span><span class=\"nx\">retira</span><span class=\"w\"> </span><span class=\"nx\">e</span><span class=\"w\"> </span><span class=\"nx\">retorna</span><span class=\"w\"> </span><span class=\"nx\">apenas</span><span class=\"w\"> </span><span class=\"nx\">os</span><span class=\"w\"> </span><span class=\"nx\">itens</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">getItems</span><span class=\"p\">()</span><span class=\"w\">     </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"o\">&lt;</span><span class=\"nx\">Item</span><span class=\"o\">&gt;</span>\n\n<span class=\"w\">  </span><span class=\"s1\">&#39; percorre o vetor de valuables</span>\n<span class=\"s1\">  &#39;</span><span class=\"w\"> </span><span class=\"nx\">somando</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">valor</span><span class=\"w\"> </span><span class=\"nx\">de</span><span class=\"w\"> </span><span class=\"nx\">todos</span><span class=\"w\"> </span><span class=\"nx\">os</span><span class=\"w\"> </span><span class=\"nx\">elementos</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">calcValue</span><span class=\"p\">()</span><span class=\"w\">     </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kr\">double</span>\n\n<span class=\"w\">  </span><span class=\"s1\">&#39; percorre o vetor de valuables</span>\n<span class=\"s1\">  &#39;</span><span class=\"w\"> </span><span class=\"nx\">somando</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">volume</span><span class=\"w\"> </span><span class=\"nx\">de</span><span class=\"w\"> </span><span class=\"nx\">todos</span><span class=\"w\"> </span><span class=\"nx\">os</span><span class=\"w\"> </span><span class=\"nx\">elementos</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">getVolume</span><span class=\"p\">()</span><span class=\"w\">    </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kr\">int</span>\n\n<span class=\"w\">  </span><span class=\"s1\">&#39; retorna o volume max</span>\n<span class=\"s1\">  + getVolumeMax() : int</span>\n\n<span class=\"s1\">  &#39;</span><span class=\"w\"> </span><span class=\"nx\">retorna</span><span class=\"w\"> </span><span class=\"nx\">se</span><span class=\"w\"> </span><span class=\"nx\">esta</span><span class=\"w\"> </span><span class=\"nx\">quebrado</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">isBroken</span><span class=\"p\">()</span><span class=\"w\">     </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">boolean</span>\n<span class=\"w\">  </span><span class=\"nx\">__</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">toString</span><span class=\"p\">()</span><span class=\"w\">     </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nx\">Pig</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"o\">--&gt;</span><span class=\"w\"> </span><span class=\"s2\">&quot;0..*&quot;</span><span class=\"w\"> </span><span class=\"nx\">Valuable</span>\n<span class=\"nx\">Coin</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Valuable</span><span class=\"w\"> </span>\n<span class=\"nx\">Item</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Valuable</span><span class=\"w\"> </span>\n<span class=\"kd\">@enduml</span>\n</code></pre></div>\n<!-- load -->\n\n<hr />\n<h2>Shell</h2>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE init</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">20</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">0</span>.00$<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">0</span>/20<span class=\"w\"> </span>:<span class=\"w\"> </span>intact\n\n<span class=\"c1\">#TEST_CASE insert</span>\n<span class=\"nv\">$addCoin</span><span class=\"w\"> </span><span class=\"m\">10</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>M10:0.10:1<span class=\"o\">]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">0</span>.10$<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">1</span>/20<span class=\"w\"> </span>:<span class=\"w\"> </span>intact\n\n<span class=\"nv\">$addCoin</span><span class=\"w\"> </span><span class=\"m\">50</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>M10:0.10:1,<span class=\"w\"> </span>M50:0.50:3<span class=\"o\">]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">0</span>.60$<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">4</span>/20<span class=\"w\"> </span>:<span class=\"w\"> </span>intact\n\n<span class=\"c1\">#TEST_CASE itens</span>\n<span class=\"nv\">$addItem</span><span class=\"w\"> </span>ouro<span class=\"w\"> </span><span class=\"m\">50</span>.0<span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>M10:0.10:1,<span class=\"w\"> </span>M50:0.50:3,<span class=\"w\"> </span>ouro:50.00:3<span class=\"o\">]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">50</span>.60$<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">7</span>/20<span class=\"w\"> </span>:<span class=\"w\"> </span>intact\n\n<span class=\"nv\">$addItem</span><span class=\"w\"> </span>passaporte<span class=\"w\"> </span><span class=\"m\">0</span>.0<span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>M10:0.10:1,<span class=\"w\"> </span>M50:0.50:3,<span class=\"w\"> </span>ouro:50.00:3,<span class=\"w\"> </span>passaporte:0.00:2<span class=\"o\">]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">50</span>.60$<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">9</span>/20<span class=\"w\"> </span>:<span class=\"w\"> </span>intact\n\n<span class=\"c1\">#TEST_CASE failed break</span>\n<span class=\"nv\">$extractItems</span>\nfail:<span class=\"w\"> </span>you<span class=\"w\"> </span>must<span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span>the<span class=\"w\"> </span>pig<span class=\"w\"> </span>first\n\n<span class=\"nv\">$extractCoins</span>\nfail:<span class=\"w\"> </span>you<span class=\"w\"> </span>must<span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span>the<span class=\"w\"> </span>pig<span class=\"w\"> </span>first\n\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>M10:0.10:1,<span class=\"w\"> </span>M50:0.50:3,<span class=\"w\"> </span>ouro:50.00:3,<span class=\"w\"> </span>passaporte:0.00:2<span class=\"o\">]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">50</span>.60$<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">9</span>/20<span class=\"w\"> </span>:<span class=\"w\"> </span>intact\n\n<span class=\"c1\">#TEST_CASE breaking</span>\n<span class=\"nv\">$break</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>M10:0.10:1,<span class=\"w\"> </span>M50:0.50:3,<span class=\"w\"> </span>ouro:50.00:3,<span class=\"w\"> </span>passaporte:0.00:2<span class=\"o\">]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">50</span>.60$<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">0</span>/20<span class=\"w\"> </span>:<span class=\"w\"> </span>broken\n\n<span class=\"c1\">#TEST_CASE extractItems</span>\n\n<span class=\"nv\">$extractItems</span>\n<span class=\"o\">[</span>ouro:50.00:3,<span class=\"w\"> </span>passaporte:0.00:2<span class=\"o\">]</span>\n\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>M10:0.10:1,<span class=\"w\"> </span>M50:0.50:3<span class=\"o\">]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">0</span>.60$<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">0</span>/20<span class=\"w\"> </span>:<span class=\"w\"> </span>broken\n\n<span class=\"c1\">#TEST_CASE extractCoins</span>\n\n<span class=\"nv\">$extractCoins</span>\n<span class=\"o\">[</span>M10:0.10:1,<span class=\"w\"> </span>M50:0.50:3<span class=\"o\">]</span>\n\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">0</span>.00$<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">0</span>/20<span class=\"w\"> </span>:<span class=\"w\"> </span>broken\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">10</span>\n\n<span class=\"nv\">$break</span>\n\n<span class=\"nv\">$addCoin</span><span class=\"w\"> </span><span class=\"m\">10</span>\nfail:<span class=\"w\"> </span>the<span class=\"w\"> </span>pig<span class=\"w\"> </span>is<span class=\"w\"> </span>broken\n\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">0</span>.00$<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">0</span>/10<span class=\"w\"> </span>:<span class=\"w\"> </span>broken\n\n<span class=\"nv\">$addItem</span><span class=\"w\"> </span>bilhete<span class=\"w\"> </span><span class=\"m\">0</span>.00<span class=\"w\"> </span><span class=\"m\">2</span>\nfail:<span class=\"w\"> </span>the<span class=\"w\"> </span>pig<span class=\"w\"> </span>is<span class=\"w\"> </span>broken\n\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">0</span>.00$<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">0</span>/10<span class=\"w\"> </span>:<span class=\"w\"> </span>broken\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE full coin</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">5</span>\n\n<span class=\"nv\">$addCoin</span><span class=\"w\"> </span><span class=\"m\">10</span>\n<span class=\"nv\">$addCoin</span><span class=\"w\"> </span><span class=\"m\">25</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>M10:0.10:1,<span class=\"w\"> </span>M25:0.25:2<span class=\"o\">]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">0</span>.35$<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">3</span>/5<span class=\"w\"> </span>:<span class=\"w\"> </span>intact\n\n<span class=\"nv\">$addCoin</span><span class=\"w\"> </span><span class=\"m\">50</span>\nfail:<span class=\"w\"> </span>the<span class=\"w\"> </span>pig<span class=\"w\"> </span>is<span class=\"w\"> </span>full\n\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>M10:0.10:1,<span class=\"w\"> </span>M25:0.25:2<span class=\"o\">]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">0</span>.35$<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">3</span>/5<span class=\"w\"> </span>:<span class=\"w\"> </span>intact\n\n<span class=\"c1\">#TEST_CASE full item</span>\n<span class=\"nv\">$addItem</span><span class=\"w\"> </span>ouro<span class=\"w\"> </span><span class=\"m\">100</span>.0<span class=\"w\"> </span><span class=\"m\">1</span>\n\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>M10:0.10:1,<span class=\"w\"> </span>M25:0.25:2,<span class=\"w\"> </span>ouro:100.00:1<span class=\"o\">]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">100</span>.35$<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">4</span>/5<span class=\"w\"> </span>:<span class=\"w\"> </span>intact\n\n<span class=\"nv\">$addItem</span><span class=\"w\"> </span>pirulito<span class=\"w\"> </span><span class=\"m\">5</span>.50<span class=\"w\"> </span><span class=\"m\">2</span>\nfail:<span class=\"w\"> </span>the<span class=\"w\"> </span>pig<span class=\"w\"> </span>is<span class=\"w\"> </span>full\n\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>M10:0.10:1,<span class=\"w\"> </span>M25:0.25:2,<span class=\"w\"> </span>ouro:100.00:1<span class=\"o\">]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">100</span>.35$<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"m\">4</span>/5<span class=\"w\"> </span>:<span class=\"w\"> </span>intact\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT init\ninit 20\nshow\nend\n======== EXPECT\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT insert\ninit 20\nshow\naddCoin 10\nshow\naddCoin 50\nshow\nend\n======== EXPECT\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT itens\ninit 20\nshow\naddCoin 10\nshow\naddCoin 50\nshow\naddItem ouro 50.0 3\nshow\naddItem passaporte 0.0 2\nshow\nend\n======== EXPECT\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n$addItem ouro 50.0 3\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3] : 50.60$ : 7/20 : intact\n$addItem passaporte 0.0 2\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT failed break\ninit 20\nshow\naddCoin 10\nshow\naddCoin 50\nshow\naddItem ouro 50.0 3\nshow\naddItem passaporte 0.0 2\nshow\nextractItems\nextractCoins\nshow\nend\n======== EXPECT\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n$addItem ouro 50.0 3\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3] : 50.60$ : 7/20 : intact\n$addItem passaporte 0.0 2\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$extractItems\nfail: you must break the pig first\n$extractCoins\nfail: you must break the pig first\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT breaking\ninit 20\nshow\naddCoin 10\nshow\naddCoin 50\nshow\naddItem ouro 50.0 3\nshow\naddItem passaporte 0.0 2\nshow\nextractItems\nextractCoins\nshow\nbreak\nshow\nend\n======== EXPECT\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n$addItem ouro 50.0 3\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3] : 50.60$ : 7/20 : intact\n$addItem passaporte 0.0 2\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$extractItems\nfail: you must break the pig first\n$extractCoins\nfail: you must break the pig first\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$break\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 0/20 : broken\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT extractItems\ninit 20\nshow\naddCoin 10\nshow\naddCoin 50\nshow\naddItem ouro 50.0 3\nshow\naddItem passaporte 0.0 2\nshow\nextractItems\nextractCoins\nshow\nbreak\nshow\nextractItems\nshow\nend\n======== EXPECT\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n$addItem ouro 50.0 3\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3] : 50.60$ : 7/20 : intact\n$addItem passaporte 0.0 2\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$extractItems\nfail: you must break the pig first\n$extractCoins\nfail: you must break the pig first\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$break\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 0/20 : broken\n$extractItems\n[ouro:50.00:3, passaporte:0.00:2]\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 0/20 : broken\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT extractCoins\ninit 20\nshow\naddCoin 10\nshow\naddCoin 50\nshow\naddItem ouro 50.0 3\nshow\naddItem passaporte 0.0 2\nshow\nextractItems\nextractCoins\nshow\nbreak\nshow\nextractItems\nshow\nextractCoins\nshow\nend\n======== EXPECT\n$init 20\n$show\n[] : 0.00$ : 0/20 : intact\n$addCoin 10\n$show\n[M10:0.10:1] : 0.10$ : 1/20 : intact\n$addCoin 50\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 4/20 : intact\n$addItem ouro 50.0 3\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3] : 50.60$ : 7/20 : intact\n$addItem passaporte 0.0 2\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$extractItems\nfail: you must break the pig first\n$extractCoins\nfail: you must break the pig first\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 9/20 : intact\n$break\n$show\n[M10:0.10:1, M50:0.50:3, ouro:50.00:3, passaporte:0.00:2] : 50.60$ : 0/20 : broken\n$extractItems\n[ouro:50.00:3, passaporte:0.00:2]\n$show\n[M10:0.10:1, M50:0.50:3] : 0.60$ : 0/20 : broken\n$extractCoins\n[M10:0.10:1, M50:0.50:3]\n$show\n[] : 0.00$ : 0/20 : broken\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\ninit 10\nbreak\naddCoin 10\nshow\naddItem bilhete 0.00 2\nshow\nend\n======== EXPECT\n$init 10\n$break\n$addCoin 10\nfail: the pig is broken\n$show\n[] : 0.00$ : 0/10 : broken\n$addItem bilhete 0.00 2\nfail: the pig is broken\n$show\n[] : 0.00$ : 0/10 : broken\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT full coin\ninit 5\naddCoin 10\naddCoin 25\nshow\naddCoin 50\nshow\nend\n======== EXPECT\n$init 5\n$addCoin 10\n$addCoin 25\n$show\n[M10:0.10:1, M25:0.25:2] : 0.35$ : 3/5 : intact\n$addCoin 50\nfail: the pig is full\n$show\n[M10:0.10:1, M25:0.25:2] : 0.35$ : 3/5 : intact\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT full item\ninit 5\naddCoin 10\naddCoin 25\nshow\naddCoin 50\nshow\naddItem ouro 100.0 1\nshow\naddItem pirulito 5.50 2\nshow\nend\n======== EXPECT\n$init 5\n$addCoin 10\n$addCoin 25\n$show\n[M10:0.10:1, M25:0.25:2] : 0.35$ : 3/5 : intact\n$addCoin 50\nfail: the pig is full\n$show\n[M10:0.10:1, M25:0.25:2] : 0.35$ : 3/5 : intact\n$addItem ouro 100.0 1\n$show\n[M10:0.10:1, M25:0.25:2, ouro:100.00:1] : 100.35$ : 4/5 : intact\n$addItem pirulito 5.50 2\nfail: the pig is full\n$show\n[M10:0.10:1, M25:0.25:2, ouro:100.00:1] : 100.35$ : 4/5 : intact\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\nfunction main() {\n    \n    while (true) {\n        let line = input();\n        console.log(\"$\" + line);\n        let args = line.split(\" \");\n        \n        try {\n            if (args[0] == \"end\") {\n                break;\n            }\n            else if (args[0] == \"show\") {\n            }\n            else if (args[0] == \"init\") {\n                // const volumeMax = parseInt(args[1]);\n            }\n            else if (args[0] == \"addCoin\") {\n                // let value = parseInt(args[1]);\n            }\n            else if (args[0] == \"addItem\") {\n                // const label = args[1];\n                // const value = parseInt(args[2]);\n                // const volume = parseInt(args[3]);\n            }\n            else if (args[0] == \"break\") {\n            }\n            else if (args[0] == \"extractCoins\") {\n            }\n            else if (args[0] == \"extractItems\") {\n            }\n            else {\n                console.log(\"fail: invalid command\");\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class Shell {\n    public static void main(String[] a) {\n        Pig pig = new Pig(0);\n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n            var args = line.split(\" \");\n            var cmd = args[0];\n            \n            try {\n                if (cmd.equals(\"end\")) {\n                    break;\n                }\n                else if(cmd.equals(\"show\")) { \n                }\n                else if(cmd.equals(\"addCoin\")) {\n                    // String value = args[1];\n                }\n                else if(cmd.equals(\"init\")) {\n                    // var volume = Integer.parseInt(args[1]);\n                }\n                else if(cmd.equals(\"addItem\")) {\n                    // var label = args[1];\n                    // var value = Double.parseDouble(args[2]);\n                    // var volume = Integer.parseInt(args[3]);\n                }\n                else if(cmd.equals(\"break\")) {\n                }\n                else if(cmd.equals(\"extractCoins\")) { \n                }\n                else if(cmd.equals(\"extractItems\")) { \n                }\n                else {\n                    System.out.println(\"fail: comando invalido\");\n                }\n            } catch (RuntimeException e) {\n                System.out.println(e.getMessage());\n            }\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <memory>\n#include <vector>\n#include <sstream>\n#include <iomanip>\nusing namespace std;\n\ntemplate <typename CONTAINER, typename FUNC>\nstring map_join(const CONTAINER& container, FUNC func, const string& separator) {\n    stringstream ss;\n    for (auto it = container.begin(); it != container.end(); ++it) {\n        ss << (it == container.begin() ? \"\" : separator);\n        ss << func(*it);\n    }\n    return ss.str();\n}\n\n\nint main() {\n    while (true) {\n        try {\n            string line, cmd;\n            getline(cin, line);\n            cout << '$' << line << endl;\n\n            stringstream ss(line);\n            ss >> cmd;\n\n            if (cmd == \"end\" ) {\n                break;\n            }\n            else if (cmd == \"init\") {\n                // int volumeMax;\n                // ss >> volumeMax;\n            }\n            else if (cmd == \"addCoin\") {\n                // int value;\n                // ss >> value;\n            }\n            else if (cmd == \"addItem\") {\n                // string label;\n                // double value;\n                // int volume;\n                // ss >> label >> value >> volume;\n            }\n            else if (cmd == \"break\") {\n            }\n            else if (cmd == \"extractCoins\") {\n            }\n            else if (cmd == \"extractItems\") { \n            }\n            else if (cmd == \"show\") { \n            }\n            else { \n                cout << \"fail: invalid command\" << endl;\n            }\n        } catch (string s) {\n            cout << s << endl;\n        }\n    }\n\n}\n",
                "type": "show"
            }
        ]
    }
}
