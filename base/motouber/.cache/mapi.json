{
    "title": "@motouber: MotoUber com motorista e passageiro",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@motouber: MotoUber com motorista e passageiro</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>MotoUber com motorista e passageiro</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/motouber/cover.jpg\" /></p>\n<h2>Intro</h2>\n<ul>\n<li>Voc\u00ea vai gerenciar um objeto da classe moto que faz corridas com passageiros.</li>\n<li>A moto pode ter um motorista e pode ter um passageiro.</li>\n<li>A moto deve registrar o custo atual da corrida.</li>\n<li>O passageiro deve pagar o motorista quando descer da moto.</li>\n<li>Motorista e Passageiro s\u00e3o pessoas que tem nome e dinheiro.</li>\n<li>O passageiro n\u00e3o pode subir na moto se n\u00e3o tiver motorista.</li>\n<li>Quando o passageiro entra na moto, come\u00e7a a contagem do custo da corrida.</li>\n<li>Cada km percorrido aumenta o custo da corrida em 1 real.</li>\n<li>Na hora de desembarcar, o passageiro paga o motorista de acordo com o que foi percorrido.</li>\n<li>Se n\u00e3o tiver dinheiro suficiente, o passageiro d\u00e1 tudo que tem.</li>\n<li>O motorista sempre recebe o valor completo da corrida, porque o Uber paga o que falta.</li>\n</ul>\n<h2>Guide</h2>\n<p><a href=\"https://youtu.be/SR5B0QkEFpc?si=wHrdAy-3_aZ5Pv3j\"><img alt=\"youtube icon\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/motouber/../youguide.png\" /></a></p>\n<ul>\n<li>Crie a classe Pessoa com os atributos nome e dinheiro.</li>\n<li>Crie a classe Moto com os atributos custo, motorista e passageiro.</li>\n<li>Ambas as classes devem ter atributos privados.</li>\n<li>Crie os m\u00e9todos que julgar necess\u00e1rio com os devidos modificadores de acesso.</li>\n</ul>\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE criar</span>\n<span class=\"nv\">$show</span>\nCost:<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span>Driver:<span class=\"w\"> </span>None,<span class=\"w\"> </span>Passenger:<span class=\"w\"> </span>None\n\n<span class=\"c1\">#TEST_CASE inserir motorista</span>\n<span class=\"nv\">$setDriver</span><span class=\"w\"> </span>Tobias<span class=\"w\"> </span><span class=\"m\">50</span>\n<span class=\"nv\">$show</span>\nCost:<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span>Driver:<span class=\"w\"> </span>Tobias:50,<span class=\"w\"> </span>Passenger:<span class=\"w\"> </span>None\n\n<span class=\"c1\">#TEST_CASE inserir passageiro</span>\n<span class=\"nv\">$setPass</span><span class=\"w\"> </span>Ana<span class=\"w\"> </span><span class=\"m\">20</span>\n<span class=\"nv\">$show</span>\nCost:<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span>Driver:<span class=\"w\"> </span>Tobias:50,<span class=\"w\"> </span>Passenger:<span class=\"w\"> </span>Ana:20\n\n<span class=\"c1\">#TEST_CASE subir passageiro</span>\n<span class=\"nv\">$drive</span><span class=\"w\"> </span><span class=\"m\">10</span>\n<span class=\"nv\">$show</span>\nCost:<span class=\"w\"> </span><span class=\"m\">10</span>,<span class=\"w\"> </span>Driver:<span class=\"w\"> </span>Tobias:50,<span class=\"w\"> </span>Passenger:<span class=\"w\"> </span>Ana:20\n\n<span class=\"c1\">#TEST_CASE descer passageiro</span>\n<span class=\"nv\">$leavePass</span>\nAna:10<span class=\"w\"> </span>left\n\n<span class=\"nv\">$show</span>\nCost:<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span>Driver:<span class=\"w\"> </span>Tobias:60,<span class=\"w\"> </span>Passenger:<span class=\"w\"> </span>None\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<hr />\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE criar</span>\n<span class=\"nv\">$show</span>\nCost:<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span>Driver:<span class=\"w\"> </span>None,<span class=\"w\"> </span>Passenger:<span class=\"w\"> </span>None\n<span class=\"nv\">$setDriver</span><span class=\"w\"> </span>Tobias<span class=\"w\"> </span><span class=\"m\">20</span>\n<span class=\"nv\">$show</span>\nCost:<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span>Driver:<span class=\"w\"> </span>Tobias:20,<span class=\"w\"> </span>Passenger:<span class=\"w\"> </span>None\n\n<span class=\"nv\">$setPass</span><span class=\"w\"> </span>Ana<span class=\"w\"> </span><span class=\"m\">10</span>\n<span class=\"nv\">$show</span>\nCost:<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span>Driver:<span class=\"w\"> </span>Tobias:20,<span class=\"w\"> </span>Passenger:<span class=\"w\"> </span>Ana:10\n\n<span class=\"c1\">#TEST_CASE Dirigir e Dirigir</span>\n\n<span class=\"nv\">$drive</span><span class=\"w\"> </span><span class=\"m\">20</span>\n<span class=\"nv\">$show</span>\nCost:<span class=\"w\"> </span><span class=\"m\">20</span>,<span class=\"w\"> </span>Driver:<span class=\"w\"> </span>Tobias:20,<span class=\"w\"> </span>Passenger:<span class=\"w\"> </span>Ana:10\n\n<span class=\"nv\">$drive</span><span class=\"w\"> </span><span class=\"m\">10</span>\n<span class=\"nv\">$show</span>\nCost:<span class=\"w\"> </span><span class=\"m\">30</span>,<span class=\"w\"> </span>Driver:<span class=\"w\"> </span>Tobias:20,<span class=\"w\"> </span>Passenger:<span class=\"w\"> </span>Ana:10\n\n<span class=\"c1\">#TEST_CASE descer passageiro fiado</span>\n\n<span class=\"nv\">$leavePass</span>\nfail:<span class=\"w\"> </span>Passenger<span class=\"w\"> </span>does<span class=\"w\"> </span>not<span class=\"w\"> </span>have<span class=\"w\"> </span>enough<span class=\"w\"> </span>money\nAna:0<span class=\"w\"> </span>left\n\n<span class=\"nv\">$show</span>\nCost:<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span>Driver:<span class=\"w\"> </span>Tobias:50,<span class=\"w\"> </span>Passenger:<span class=\"w\"> </span>None\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT criar\nshow\nend\n======== EXPECT\n$show\nCost: 0, Driver: None, Passenger: None\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT inserir motorista\nshow\nsetDriver Tobias 50\nshow\nend\n======== EXPECT\n$show\nCost: 0, Driver: None, Passenger: None\n$setDriver Tobias 50\n$show\nCost: 0, Driver: Tobias:50, Passenger: None\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT inserir passageiro\nshow\nsetDriver Tobias 50\nshow\nsetPass Ana 20\nshow\nend\n======== EXPECT\n$show\nCost: 0, Driver: None, Passenger: None\n$setDriver Tobias 50\n$show\nCost: 0, Driver: Tobias:50, Passenger: None\n$setPass Ana 20\n$show\nCost: 0, Driver: Tobias:50, Passenger: Ana:20\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT subir passageiro\nshow\nsetDriver Tobias 50\nshow\nsetPass Ana 20\nshow\ndrive 10\nshow\nend\n======== EXPECT\n$show\nCost: 0, Driver: None, Passenger: None\n$setDriver Tobias 50\n$show\nCost: 0, Driver: Tobias:50, Passenger: None\n$setPass Ana 20\n$show\nCost: 0, Driver: Tobias:50, Passenger: Ana:20\n$drive 10\n$show\nCost: 10, Driver: Tobias:50, Passenger: Ana:20\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT descer passageiro\nshow\nsetDriver Tobias 50\nshow\nsetPass Ana 20\nshow\ndrive 10\nshow\nleavePass\nshow\nend\n======== EXPECT\n$show\nCost: 0, Driver: None, Passenger: None\n$setDriver Tobias 50\n$show\nCost: 0, Driver: Tobias:50, Passenger: None\n$setPass Ana 20\n$show\nCost: 0, Driver: Tobias:50, Passenger: Ana:20\n$drive 10\n$show\nCost: 10, Driver: Tobias:50, Passenger: Ana:20\n$leavePass\nAna:10 left\n$show\nCost: 0, Driver: Tobias:60, Passenger: None\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT criar\nshow\nsetDriver Tobias 20\nshow\nsetPass Ana 10\nshow\nend\n======== EXPECT\n$show\nCost: 0, Driver: None, Passenger: None\n$setDriver Tobias 20\n$show\nCost: 0, Driver: Tobias:20, Passenger: None\n$setPass Ana 10\n$show\nCost: 0, Driver: Tobias:20, Passenger: Ana:10\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Dirigir e Dirigir\nshow\nsetDriver Tobias 20\nshow\nsetPass Ana 10\nshow\ndrive 20\nshow\ndrive 10\nshow\nend\n======== EXPECT\n$show\nCost: 0, Driver: None, Passenger: None\n$setDriver Tobias 20\n$show\nCost: 0, Driver: Tobias:20, Passenger: None\n$setPass Ana 10\n$show\nCost: 0, Driver: Tobias:20, Passenger: Ana:10\n$drive 20\n$show\nCost: 20, Driver: Tobias:20, Passenger: Ana:10\n$drive 10\n$show\nCost: 30, Driver: Tobias:20, Passenger: Ana:10\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT descer passageiro fiado\nshow\nsetDriver Tobias 20\nshow\nsetPass Ana 10\nshow\ndrive 20\nshow\ndrive 10\nshow\nleavePass\nshow\nend\n======== EXPECT\n$show\nCost: 0, Driver: None, Passenger: None\n$setDriver Tobias 20\n$show\nCost: 0, Driver: Tobias:20, Passenger: None\n$setPass Ana 10\n$show\nCost: 0, Driver: Tobias:20, Passenger: Ana:10\n$drive 20\n$show\nCost: 20, Driver: Tobias:20, Passenger: Ana:10\n$drive 10\n$show\nCost: 30, Driver: Tobias:20, Passenger: Ana:10\n$leavePass\nfail: Passenger does not have enough money\nAna:0 left\n$show\nCost: 0, Driver: Tobias:50, Passenger: None\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "function input() { return \"\"; }\nexport {};\n\nfunction main(): void {\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        }\n        // else if (cmd == \"show\") { \n        // }\n        // else if (cmd == \"setDriver\") { \n        //     const name = par[1];\n        //     const money = parseInt(par[2]);\n        // }\n        // else if (cmd == \"setPass\") { \n        //     const name = par[1];\n        //     const money = parseInt(par[2]);\n        // }\n        // else if (cmd == \"drive\") { \n        //     const distance = parseInt(par[1]);\n        // }\n        // else if (cmd == \"leavePass\") { \n        // }\n        else {\n            console.log(\"fail: command not found\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\n\npublic class Shell {\n\n    public static void main(String[] args) {\n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            // else if (cmd.equals(\"show\")) { \n            // }\n            // else if (cmd.equals(\"setDriver\")) { \n            //     String name = par[1];\n            //     int money = Integer.parseInt(par[2]);\n            // }\n            // else if (cmd.equals(\"setPass\")) { \n            //     String name = par[1];\n            //     int money = Integer.parseInt(par[2]);\n            // }\n            // else if (cmd.equals(\"drive\")) { \n            //     int distance = Integer.parseInt(par[1]);\n            // }\n            // else if (cmd.equals(\"leavePass\")) { \n            // }\n            else {\n                System.out.println(\"fail: command not found\");\n            }\n        }\n    }\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <sstream>\n#include <memory>\nusing namespace std;\n\n\nint main() {\n\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } \n        // else if (cmd == \"show\") { \n        // }\n        // else if (cmd == \"setDriver\") { \n        //     string name;\n        //     int money;\n        //     ss >> name >> money;\n        // }\n        // else if (cmd == \"setPass\") { \n        //     string name;\n        //     int money;\n        //     ss >> name >> money;\n        // }\n        // else if (cmd == \"drive\") { \n        //     int distance;\n        //     ss >> distance;\n        // }\n        // else if (cmd == \"leavePass\") { \n        // }\n        else {\n            cout << \"fail: command not found\\n\";\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
