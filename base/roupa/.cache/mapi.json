{
    "title": "@roupa: Roupa com testes",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@roupa: Roupa com testes</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Roupa com testes</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/roupa/cover.jpg\" /></p>\n<h2>Intro</h2>\n<p><a href=\"https://youtu.be/27-PmhwFHYY?si=gAScW7a_CyxVNnTv\"><img alt=\"youtube icon\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/animal/../youguide.png\" /></a></p>\n<ul>\n<li>Vamos implementar uma classe que controla os poss\u00edveis valores de tamanho para uma roupa.</li>\n<li>Os tamanhos ser\u00e3o identificados como uma vari\u00e1vel tipo texto, e os valores v\u00e1lidos s\u00e3o \"PP\", \"P\", \"M\" e \"G\", \"GG\" e \"XG\".</li>\n<li>Fa\u00e7a o objeto roupa iniciar o tamanho como uma string vazia, para expressar que nenhum tamanho foi atribu\u00eddo.</li>\n<li>Crie um construtor que n\u00e3o recebe par\u00e2metros e inicializa o tamanho como uma string vazia.</li>\n<li>Crie o m\u00e9todo setTamanho que apenas aceita os valores v\u00e1lidos de tamanho.<ul>\n<li>Caso o valor seja inv\u00e1lido, avise e d\u00ea uma mensagem de erro informando quais os valores permitidos.</li>\n</ul>\n</li>\n<li>Coloque o atributo tamanho como privado e crie um m\u00e9todo getTamanho para acess\u00e1-lo e setTamanho para alter\u00e1-lo.</li>\n</ul>\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE</span>\n<span class=\"nv\">$show</span>\nsize:<span class=\"w\"> </span><span class=\"o\">()</span>\n\n<span class=\"nv\">$size</span><span class=\"w\"> </span>F\nfail:<span class=\"w\"> </span>Valor<span class=\"w\"> </span>inv\u00e1lido,<span class=\"w\"> </span>tente<span class=\"w\"> </span>PP,<span class=\"w\"> </span>P,<span class=\"w\"> </span>M,<span class=\"w\"> </span>G,<span class=\"w\"> </span>GG<span class=\"w\"> </span>ou<span class=\"w\"> </span>XG\n\n<span class=\"nv\">$show</span>\nsize:<span class=\"w\"> </span><span class=\"o\">()</span>\n\n<span class=\"nv\">$size</span><span class=\"w\"> </span>PP\n<span class=\"nv\">$show</span>\nsize:<span class=\"w\"> </span><span class=\"o\">(</span>PP<span class=\"o\">)</span>\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/roupa/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/roupa/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/roupa/.cache/draft/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\nshow\nsize F\nshow\nsize PP\nshow\nend\n======== EXPECT\n$show\nsize: ()\n$size F\nfail: Valor inv\u00e1lido, tente PP, P, M, G, GG ou XG\n$show\nsize: ()\n$size PP\n$show\nsize: (PP)\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\nfunction main(): void {\n    // CRIE SEU OBJETO AQUI\n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const args = line.split(\" \");\n        const cmd = args[0];\n\n        if (cmd == \"size\") { // TENTE ATRIBUIR UM TAMANHO A ROUPA\n            // const size = args[1];\n        } else if (cmd == \"show\") { // MOSTRE A ROUPA\n        } else if (cmd == \"end\") {\n            break;\n        } else {\n            console.log(\"fail: Comando inv\u00e1lido\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\n\npublic class Shell {    \n    public static void main(String[] args) {\n        // CRIE SEU OBJETO AQUI\n        \n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n            \n            var par = line.split(\" \");\n            var cmd = par[0];\n            \n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"size\")) { // TENTE ATRIBUIR UM TAMANHO A ROUPA\n                // String size = par[1];\n            }\n            else if (cmd.equals(\"show\")) { // MOSTRE A ROUPA\n            }\n            else {\n                System.out.println(\"fail: Comando inv\u00e1lido\");\n            }\n        }\n    }\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nint main() {\n    // CRIE SEU OBJETO AQUI\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"size\") { // TENTE ATRIBUIR UM TAMANHO\n            // string size;\n            // ss >> size;\n        } else if (cmd == \"show\") { // MOSTRE AS INFORMA\u00c7\u00d5ES DO OBJETO\n        } else if (cmd == \"end\") {\n            break;\n        } else {\n            cout << \"fail: Comando inv\u00e1lido\" << endl;\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
