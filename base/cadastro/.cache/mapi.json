{
    "title": "@cadastro: Crie as contas poupan\u00e7a e corrente",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@cadastro: Crie as contas poupan\u00e7a e corrente</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Crie as contas poupan\u00e7a e corrente</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#v\u00eddeo\">V\u00eddeo</a></th>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cadastro/cover.jpg\" /></p>\n<p>O objetivo dessa atividade \u00e9 implementar uma ag\u00eancia banc\u00e1ria simplificada. Deve ser capaz de cadastrar cliente. Cada cliente inicia com uma conta poupan\u00e7a e uma conta corrente. Contas correntes tem taxa de administra\u00e7\u00e3o e contas poupan\u00e7as rendem juros.</p>\n<h2>V\u00eddeo</h2>\n<p><a href=\"https://youtu.be/AfJ--C8ZqPY\"><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cadastro/video.png\" /></a></p>\n<h2>Intro</h2>\n<ul>\n<li>Cadastrar um cliente com idCliente \u00fanico<ul>\n<li>Quando o cliente \u00e9 cadastrado no sistema, automaticamente \u00e9 aberta uma conta corrente e uma conta poupan\u00e7a para ele.</li>\n</ul>\n</li>\n<li>Mensalmente:<ul>\n<li>Contas corrente v\u00e3o receber uma tarifa de <strong>20 reais</strong> podendo inclusive ficar negativas.</li>\n<li>Contas poupan\u00e7a v\u00e3o aumentar de 1 porcento.</li>\n</ul>\n</li>\n<li>Sua ag\u00eancia deve ter um mapa de clientes e um mapa de contas.</li>\n<li>O cliente s\u00f3 tem duas contas, mas imagine que no futuro ele poder\u00e1 ter v\u00e1rias.</li>\n<li>As contas devem ser tratadas utilizando polimorfismo.</li>\n</ul>\n<h2>Draft</h2>\n<p><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/cadastro/.cache/draft.ts\">draft.ts</a></p>\n<h2>Guide</h2>\n<p><img alt=\"diagrama\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cadastro/diagrama.png\" /></p>\n<p><a href=\"https://youtu.be/2Mk5c6p-d20?si=M2XqjolrOL7Hw-C3\"><img alt=\"youtube icon\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cadastro/../youguide.png\" /></a></p>\n<!-- load diagrama.puml fenced=ts:filter -->\n\n<div class=\"language-ts highlight\"><pre><span></span><code><span class=\"kd\">@startuml</span>\n\n<span class=\"nx\">skinparam</span><span class=\"w\"> </span><span class=\"nx\">defaultFontName</span><span class=\"w\"> </span><span class=\"s2\">&quot;Source Code Pro&quot;</span>\n<span class=\"nx\">skinparam</span><span class=\"w\"> </span><span class=\"nx\">dpi</span><span class=\"w\"> </span><span class=\"mf\">150</span>\n\n\n\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"nx\">Account</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">balance</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">double</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">accId</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">int</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">clientId</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">str</span>\n\n<span class=\"w\">    </span><span class=\"s1\">&#39; typeId {CC, CP}</span>\n<span class=\"s1\">    # typeId: str</span>\n<span class=\"s1\">    --</span>\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">inicializa</span><span class=\"w\"> </span><span class=\"nx\">os</span><span class=\"w\"> </span><span class=\"nx\">atributos</span>\n<span class=\"w\">    </span><span class=\"s1\">&#39; saldo inicial \u00e9 0</span>\n<span class=\"s1\">    + Account(accId: int, clientId: str, typeId: str)</span>\n\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">realiza</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">dep\u00f3sito</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">deposit</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">double</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"s1\">&#39; realiza o saque</span>\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">verifique</span><span class=\"w\"> </span><span class=\"nx\">se</span><span class=\"w\"> </span><span class=\"nx\">h\u00e1</span><span class=\"w\"> </span><span class=\"nx\">saldo</span><span class=\"w\"> </span><span class=\"nx\">suficiente</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">withdraw</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">double</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"s1\">&#39; realiza a transfer\u00eancia da conta this para conta other</span>\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">verifique</span><span class=\"w\"> </span><span class=\"nx\">se</span><span class=\"w\"> </span><span class=\"nx\">h\u00e1</span><span class=\"w\"> </span><span class=\"nx\">saldo</span><span class=\"w\"> </span><span class=\"nx\">suficiente</span><span class=\"w\"> </span><span class=\"nx\">na</span><span class=\"w\"> </span><span class=\"nx\">conta</span><span class=\"w\"> </span><span class=\"k\">this</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">transfer</span><span class=\"p\">(</span><span class=\"nx\">other</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Account</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">value</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">double</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"s1\">&#39; retorna as informa\u00e7\u00f5es na conta no formato</span>\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"s2\">&quot;accId:clientId:balance:typeId&quot;</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">toString</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">str</span>\n<span class=\"w\">    </span><span class=\"o\">--</span>\n\n<span class=\"w\">    </span><span class=\"s1\">&#39; retorna o saldo</span>\n<span class=\"s1\">    + getBalance(): double</span>\n\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">retorna</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">id</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">getId</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kr\">int</span>\n\n<span class=\"w\">    </span><span class=\"s1\">&#39; retorna o id do cliente</span>\n<span class=\"s1\">    + getClientId(): str</span>\n\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">retorna</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">tipo</span><span class=\"w\"> </span><span class=\"nx\">da</span><span class=\"w\"> </span><span class=\"nx\">conta</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">getTypeId</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">str</span>\n<span class=\"w\">    </span><span class=\"o\">--</span>\n\n<span class=\"w\">    </span><span class=\"s1\">&#39; m\u00e9todo abstrato que realiza a atualiza\u00e7\u00e3o mensal da conta</span>\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">m\u00e9todo</span><span class=\"w\"> </span><span class=\"nx\">deve</span><span class=\"w\"> </span><span class=\"nx\">ser</span><span class=\"w\"> </span><span class=\"nx\">implementado</span><span class=\"w\"> </span><span class=\"nx\">nas</span><span class=\"w\"> </span><span class=\"nx\">subclasses</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"k\">static</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nx\">updateMonthly</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"ow\">void</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"nx\">CheckingAccount</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"s1\">&#39; taxa de manuten\u00e7\u00e3o da conta</span>\n<span class=\"s1\">    # monthlyFee: double</span>\n<span class=\"s1\">    --</span>\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">chama</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">construtor</span><span class=\"w\"> </span><span class=\"nx\">da</span><span class=\"w\"> </span><span class=\"nx\">superclasse</span>\n<span class=\"w\">    </span><span class=\"s1\">&#39; repassando os valores accId, clientId e typeId = CC</span>\n<span class=\"s1\">    + CheckingAccount(accId: int, clientId: str)</span>\n\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">decrementa</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">saldo</span><span class=\"w\"> </span><span class=\"nx\">da</span><span class=\"w\"> </span><span class=\"nx\">conta</span><span class=\"w\"> </span><span class=\"nx\">em</span><span class=\"w\"> </span><span class=\"nx\">monthlyFee</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">updateMonthly</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"ow\">void</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"nx\">SavingsAccount</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"s1\">&#39; taxa de rendimento mensal</span>\n<span class=\"s1\">    # monthlyInterest: double</span>\n\n<span class=\"s1\">    --</span>\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">chama</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">construtor</span><span class=\"w\"> </span><span class=\"nx\">da</span><span class=\"w\"> </span><span class=\"nx\">superclasse</span>\n<span class=\"w\">    </span><span class=\"s1\">&#39; repassando os valores accId, clientId e typeId = CP</span>\n<span class=\"s1\">    + SavingsAccount(accId: int, clientId: str)</span>\n\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">incrementa</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">saldo</span><span class=\"w\"> </span><span class=\"nx\">da</span><span class=\"w\"> </span><span class=\"nx\">conta</span><span class=\"w\"> </span><span class=\"nx\">em</span><span class=\"w\"> </span><span class=\"nx\">monthlyInterest</span><span class=\"w\"> </span><span class=\"o\">%</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">updateMonthly</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"ow\">void</span><span class=\"w\">  </span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"nx\">Client</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">clientId</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">str</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">accounts</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">list</span><span class=\"p\">[</span><span class=\"nx\">Account</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"o\">--</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Client</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">clientId</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"s1\">&#39; adiciona uma conta \u00e0 lista de contas do cliente</span>\n<span class=\"s1\">    + addAccount(acc: Account)</span>\n\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">retorna</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">lista</span><span class=\"w\"> </span><span class=\"nx\">de</span><span class=\"w\"> </span><span class=\"nx\">contas</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"nx\">cliente</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">getAccounts</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">list</span><span class=\"p\">[</span><span class=\"nx\">Account</span><span class=\"p\">]</span>\n\n<span class=\"w\">    </span><span class=\"s1\">&#39; retorna o id do cliente</span>\n<span class=\"s1\">    + getClientId(): str</span>\n\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">retorna</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">nome</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"nx\">cliente</span><span class=\"w\"> </span><span class=\"nx\">e</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">lista</span><span class=\"w\"> </span><span class=\"nx\">com</span><span class=\"w\"> </span><span class=\"nx\">os</span><span class=\"w\"> </span><span class=\"nx\">ids</span><span class=\"w\"> </span><span class=\"nx\">das</span><span class=\"w\"> </span><span class=\"nx\">contas</span><span class=\"w\"> </span><span class=\"nx\">no</span><span class=\"w\"> </span><span class=\"nx\">formato</span>\n<span class=\"w\">    </span><span class=\"s1\">&#39; nome [id1, id2, ...]</span>\n<span class=\"s1\">    + toString(): str</span>\n<span class=\"s1\">}</span>\n\n<span class=\"s1\">class Agency {</span>\n<span class=\"s1\">        - accounts: Map&lt;int, Account&gt;</span>\n<span class=\"s1\">        - clients : Map&lt;str, Client&gt;</span>\n<span class=\"s1\">        - nextAccountId: int</span>\n<span class=\"s1\">    --</span>\n\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">busca</span><span class=\"w\"> </span><span class=\"nx\">pela</span><span class=\"w\"> </span><span class=\"nx\">conta</span><span class=\"w\"> </span><span class=\"nx\">e</span><span class=\"w\"> </span><span class=\"nx\">dispara</span><span class=\"w\"> </span><span class=\"nx\">excess\u00e3o</span><span class=\"w\"> </span><span class=\"nx\">se</span><span class=\"w\"> </span><span class=\"nx\">n\u00e3o</span><span class=\"w\"> </span><span class=\"nx\">encontrar</span>\n<span class=\"w\">        </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">getAccount</span><span class=\"p\">(</span><span class=\"kr\">int</span><span class=\"w\"> </span><span class=\"nx\">accountId</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Account</span>\n<span class=\"w\">    </span><span class=\"o\">--</span>\n<span class=\"w\">    </span><span class=\"s1\">&#39; inicializa os atributos</span>\n<span class=\"s1\">    + BankAgency()</span>\n\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">cria</span><span class=\"w\"> </span><span class=\"nx\">uma</span><span class=\"w\"> </span><span class=\"nx\">conta</span><span class=\"w\"> </span><span class=\"nx\">para</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">cliente</span>\n<span class=\"w\">    </span><span class=\"s1\">&#39; cria um objeto cliente e insere no mapa de clientes</span>\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">cria</span><span class=\"w\"> </span><span class=\"nx\">uma</span><span class=\"w\"> </span><span class=\"nx\">conta</span><span class=\"w\"> </span><span class=\"nx\">corrente</span><span class=\"w\"> </span><span class=\"nx\">e</span><span class=\"w\"> </span><span class=\"nx\">uma</span><span class=\"w\"> </span><span class=\"nx\">conta</span><span class=\"w\"> </span><span class=\"nx\">polpan\u00e7a</span><span class=\"w\"> </span><span class=\"nx\">e</span><span class=\"w\"> </span><span class=\"nx\">insere</span><span class=\"w\"> </span><span class=\"nx\">no</span><span class=\"w\"> </span><span class=\"nx\">mapa</span><span class=\"w\"> </span><span class=\"nx\">de</span><span class=\"w\"> </span><span class=\"nx\">contas</span>\n<span class=\"w\">    </span><span class=\"s1\">&#39; faz o v\u00ednculo cruzado colocando as contas dentro do objeto do cliente</span>\n<span class=\"s1\">    + addClient(clientId: str): void</span>\n\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">procura</span><span class=\"w\"> </span><span class=\"nx\">pela</span><span class=\"w\"> </span><span class=\"nx\">conta</span><span class=\"w\"> </span><span class=\"nx\">usando</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">getAccount</span><span class=\"w\"> </span><span class=\"nx\">e</span><span class=\"w\"> </span><span class=\"nx\">realiza</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">opera\u00e7\u00e3o</span><span class=\"w\"> </span><span class=\"nx\">de</span><span class=\"w\"> </span><span class=\"nx\">dep\u00f3sito</span>\n<span class=\"w\">    </span><span class=\"s1\">&#39; utiliza o m\u00e9todo deposit da classe Account</span>\n<span class=\"s1\">    + deposit(accId: int, value: double): void</span>\n\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">procura</span><span class=\"w\"> </span><span class=\"nx\">pela</span><span class=\"w\"> </span><span class=\"nx\">conta</span><span class=\"w\"> </span><span class=\"nx\">e</span><span class=\"w\"> </span><span class=\"nx\">realiza</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">opera\u00e7\u00e3o</span><span class=\"w\"> </span><span class=\"nx\">de</span><span class=\"w\"> </span><span class=\"nx\">saque</span>\n<span class=\"w\">    </span><span class=\"s1\">&#39; utiliza o m\u00e9todo withdraw da classe Account</span>\n<span class=\"s1\">    + withdraw(accId: int, value: double): void</span>\n\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">procura</span><span class=\"w\"> </span><span class=\"nx\">pela</span><span class=\"w\"> </span><span class=\"nx\">conta</span><span class=\"w\"> </span><span class=\"nx\">e</span><span class=\"w\"> </span><span class=\"nx\">realiza</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">opera\u00e7\u00e3o</span><span class=\"w\"> </span><span class=\"nx\">de</span><span class=\"w\"> </span><span class=\"nx\">transfer\u00eancia</span>\n<span class=\"w\">    </span><span class=\"s1\">&#39; utiliza o m\u00e9todo transfer da classe Account</span>\n<span class=\"s1\">    + transfer(fromAccId: int, toAccId: int, value: double): void</span>\n\n<span class=\"s1\">    &#39;</span><span class=\"w\"> </span><span class=\"nx\">realiza</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">opera\u00e7\u00e3o</span><span class=\"w\"> </span><span class=\"nx\">de</span><span class=\"w\"> </span><span class=\"nx\">atualiza\u00e7\u00e3o</span><span class=\"w\"> </span><span class=\"nx\">mensal</span><span class=\"w\"> </span><span class=\"nx\">em</span><span class=\"w\"> </span><span class=\"nx\">todas</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nx\">contas</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">updateMonthly</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"ow\">void</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nx\">CheckingAccount</span><span class=\"w\"> </span><span class=\"o\">--|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Account</span>\n<span class=\"nx\">SavingsAccount</span><span class=\"w\"> </span><span class=\"o\">--|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Account</span>\n\n<span class=\"nx\">Client</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"w\"> </span><span class=\"nx\">CheckingAccount</span>\n<span class=\"nx\">Client</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"w\"> </span><span class=\"nx\">SavingsAccount</span>\n\n<span class=\"nx\">Agency</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"w\"> </span><span class=\"o\">*--</span><span class=\"w\"> </span><span class=\"s2\">&quot;0..*&quot;</span><span class=\"w\"> </span><span class=\"nx\">Account</span>\n\n<span class=\"nx\">Agency</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"w\"> </span><span class=\"o\">*--</span><span class=\"nx\">l</span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"s2\">&quot;0..*&quot;</span><span class=\"w\"> </span><span class=\"nx\">Client</span>\n\n\n<span class=\"s1\">&#39; Circle --|&gt; Shape</span>\n<span class=\"s1\">&#39;</span><span class=\"w\"> </span><span class=\"nx\">Rectangle</span><span class=\"w\"> </span><span class=\"o\">--|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Shape</span>\n<span class=\"s1\">&#39; V2D  --  Circle</span>\n<span class=\"s1\">&#39;</span><span class=\"w\"> </span><span class=\"nx\">V2D</span><span class=\"w\">  </span><span class=\"o\">--</span><span class=\"w\">  </span><span class=\"nx\">Rectangle</span>\n<span class=\"kd\">@enduml</span>\n</code></pre></div>\n<!-- load -->\n\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE first clients</span>\n<span class=\"c1\"># addCli _idCliente</span>\n<span class=\"c1\"># adiciona um cliente na lista de clientes.</span>\n<span class=\"c1\"># cria uma conta poupan\u00e7a e uma conta corrente para cada cliente usando numera\u00e7\u00e3o de forma sequencial.</span>\n<span class=\"nv\">$addCli</span><span class=\"w\"> </span>Almir\n<span class=\"nv\">$addCli</span><span class=\"w\"> </span>Julia\n<span class=\"nv\">$addCli</span><span class=\"w\"> </span>Maria\n\n<span class=\"c1\"># show mostra as contas do banco, com id:usuario:saldo:tipo</span>\n<span class=\"c1\"># em tipo use CC para conta corrente e CP para conta poupan\u00e7a.</span>\n<span class=\"nv\">$show</span>\n-<span class=\"w\"> </span>Clients\nAlmir<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">]</span>\nJulia<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">]</span>\nMaria<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n-<span class=\"w\"> </span>Accounts\n<span class=\"m\">0</span>:Almir:0.00:CC\n<span class=\"m\">1</span>:Almir:0.00:CP\n<span class=\"m\">2</span>:Julia:0.00:CC\n<span class=\"m\">3</span>:Julia:0.00:CP\n<span class=\"m\">4</span>:Maria:0.00:CC\n<span class=\"m\">5</span>:Maria:0.00:CP\n\n<span class=\"c1\">######################################</span>\n<span class=\"c1\">#TEST_CASE opera\u00e7\u00f5es b\u00e1sicas</span>\n<span class=\"c1\">#fa\u00e7a as opera\u00e7\u00f5es b\u00e1sicas de saque, dep\u00f3sito e transfer\u00eancia entre contas</span>\n<span class=\"c1\">#verifique se as contas existem antes de efetuar as opera\u00e7\u00f5es</span>\n<span class=\"c1\"># $saque _conta _value</span>\n<span class=\"c1\"># para sacar verifique o saldo</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># $deposito _conta _value</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># $transf _contaDe _contaPara _value</span>\n\n<span class=\"nv\">$deposito</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"m\">100</span>\n<span class=\"nv\">$deposito</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">200</span>\n<span class=\"nv\">$deposito</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">50</span>\n<span class=\"nv\">$deposito</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">300</span>\n<span class=\"nv\">$saque</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">50</span>\n<span class=\"nv\">$saque</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"m\">70</span>\n<span class=\"nv\">$saque</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">300</span>\nfail:<span class=\"w\"> </span>saldo<span class=\"w\"> </span>insuficiente\n\n<span class=\"nv\">$show</span>\n-<span class=\"w\"> </span>Clients\nAlmir<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">]</span>\nJulia<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">]</span>\nMaria<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n-<span class=\"w\"> </span>Accounts\n<span class=\"m\">0</span>:Almir:30.00:CC\n<span class=\"m\">1</span>:Almir:200.00:CP\n<span class=\"m\">2</span>:Julia:50.00:CC\n<span class=\"m\">3</span>:Julia:250.00:CP\n<span class=\"m\">4</span>:Maria:0.00:CC\n<span class=\"m\">5</span>:Maria:0.00:CP\n\n<span class=\"nv\">$transf</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">200</span>\n<span class=\"nv\">$transf</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">25</span>\n<span class=\"nv\">$transf</span><span class=\"w\"> </span><span class=\"m\">9</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">30</span>\nfail:<span class=\"w\"> </span>conta<span class=\"w\"> </span>nao<span class=\"w\"> </span>encontrada\n<span class=\"nv\">$transf</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"w\"> </span><span class=\"m\">10</span>\nfail:<span class=\"w\"> </span>conta<span class=\"w\"> </span>nao<span class=\"w\"> </span>encontrada\n\n<span class=\"nv\">$show</span>\n-<span class=\"w\"> </span>Clients\nAlmir<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">]</span>\nJulia<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">]</span>\nMaria<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n-<span class=\"w\"> </span>Accounts\n<span class=\"m\">0</span>:Almir:5.00:CC\n<span class=\"m\">1</span>:Almir:200.00:CP\n<span class=\"m\">2</span>:Julia:50.00:CC\n<span class=\"m\">3</span>:Julia:50.00:CP\n<span class=\"m\">4</span>:Maria:25.00:CC\n<span class=\"m\">5</span>:Maria:200.00:CP\n\n<span class=\"c1\">#TEST_CASE update mensal</span>\n<span class=\"c1\"># No comando update todas as contas ser\u00e3o atualizadas.</span>\n<span class=\"c1\"># Contas corrente v\u00e3o receber uma tarifa de 20 reais podendo inclusive ficar negativas.</span>\n<span class=\"c1\"># Contas poupan\u00e7a v\u00e3o aumentar de 1 porcento.</span>\n<span class=\"nv\">$update</span>\n\n<span class=\"nv\">$show</span>\n-<span class=\"w\"> </span>Clients\nAlmir<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">]</span>\nJulia<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">]</span>\nMaria<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n-<span class=\"w\"> </span>Accounts\n<span class=\"m\">0</span>:Almir:-15.00:CC\n<span class=\"m\">1</span>:Almir:202.00:CP\n<span class=\"m\">2</span>:Julia:30.00:CC\n<span class=\"m\">3</span>:Julia:50.50:CP\n<span class=\"m\">4</span>:Maria:5.00:CC\n<span class=\"m\">5</span>:Maria:202.00:CP\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<hr />\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT first clients\naddCli Almir\naddCli Julia\naddCli Maria\nshow\nend\n======== EXPECT\n$addCli Almir\n$addCli Julia\n$addCli Maria\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:0.00:CC\n1:Almir:0.00:CP\n2:Julia:0.00:CC\n3:Julia:0.00:CP\n4:Maria:0.00:CC\n5:Maria:0.00:CP\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT opera\u00e7\u00f5es b\u00e1sicas\naddCli Almir\naddCli Julia\naddCli Maria\nshow\ndeposito 0 100\ndeposito 1 200\ndeposito 2 50\ndeposito 3 300\nsaque 3 50\nsaque 0 70\nsaque 1 300\nshow\ntransf 3 5 200\ntransf 0 4 25\ntransf 9 1 30\ntransf 2 8 10\nshow\nend\n======== EXPECT\n$addCli Almir\n$addCli Julia\n$addCli Maria\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:0.00:CC\n1:Almir:0.00:CP\n2:Julia:0.00:CC\n3:Julia:0.00:CP\n4:Maria:0.00:CC\n5:Maria:0.00:CP\n$deposito 0 100\n$deposito 1 200\n$deposito 2 50\n$deposito 3 300\n$saque 3 50\n$saque 0 70\n$saque 1 300\nfail: saldo insuficiente\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:30.00:CC\n1:Almir:200.00:CP\n2:Julia:50.00:CC\n3:Julia:250.00:CP\n4:Maria:0.00:CC\n5:Maria:0.00:CP\n$transf 3 5 200\n$transf 0 4 25\n$transf 9 1 30\nfail: conta nao encontrada\n$transf 2 8 10\nfail: conta nao encontrada\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:5.00:CC\n1:Almir:200.00:CP\n2:Julia:50.00:CC\n3:Julia:50.00:CP\n4:Maria:25.00:CC\n5:Maria:200.00:CP\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT update mensal\naddCli Almir\naddCli Julia\naddCli Maria\nshow\ndeposito 0 100\ndeposito 1 200\ndeposito 2 50\ndeposito 3 300\nsaque 3 50\nsaque 0 70\nsaque 1 300\nshow\ntransf 3 5 200\ntransf 0 4 25\ntransf 9 1 30\ntransf 2 8 10\nshow\nupdate\nshow\nend\n======== EXPECT\n$addCli Almir\n$addCli Julia\n$addCli Maria\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:0.00:CC\n1:Almir:0.00:CP\n2:Julia:0.00:CC\n3:Julia:0.00:CP\n4:Maria:0.00:CC\n5:Maria:0.00:CP\n$deposito 0 100\n$deposito 1 200\n$deposito 2 50\n$deposito 3 300\n$saque 3 50\n$saque 0 70\n$saque 1 300\nfail: saldo insuficiente\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:30.00:CC\n1:Almir:200.00:CP\n2:Julia:50.00:CC\n3:Julia:250.00:CP\n4:Maria:0.00:CC\n5:Maria:0.00:CP\n$transf 3 5 200\n$transf 0 4 25\n$transf 9 1 30\nfail: conta nao encontrada\n$transf 2 8 10\nfail: conta nao encontrada\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:5.00:CC\n1:Almir:200.00:CP\n2:Julia:50.00:CC\n3:Julia:50.00:CP\n4:Maria:25.00:CC\n5:Maria:200.00:CP\n$update\n$show\n- Clients\nAlmir [0, 1]\nJulia [2, 3]\nMaria [4, 5]\n- Accounts\n0:Almir:-15.00:CC\n1:Almir:202.00:CP\n2:Julia:30.00:CC\n3:Julia:50.50:CP\n4:Maria:5.00:CC\n5:Maria:202.00:CP\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\n\nfunction main(): void {\n    while (true) {\n        try {\n            const line = input();\n            const args = line.split(\" \");\n            console.log(\"$\" + line);\n\n            if (line === \"end\") {\n                break;\n            } else if (args[0] === \"show\") {\n            } else if (args[0] === \"addCli\") {\n                // const clientId = args[1];\n            } else if (args[0] === \"saque\") {\n                // const idConta = +args[1];\n                // const value = +args[2];\n            } else if (args[0] === \"deposito\") {\n                // const idConta = +args[1];\n                // const value = +args[2];\n            } else if (args[0] === \"transf\") {\n                // const idContaDe = +args[1];\n                // const idContaPara = +args[2];\n                // const value = +args[3];\n            } else if (args[0] === \"update\") {\n            } else {\n                console.log(\"fail: comando invalido\");\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\nimport java.util.stream.Collectors;\n\npublic class Shell {\n    public static void main(String[] s) {\n        while(true){\n            try {\n                var line = scanner.nextLine();\n                var args = line.split(\" \");\n                var cmd = args[0];\n                System.out.println(\"$\" + line);\n\n                if(cmd.equals(\"end\")) {\n                    break;\n                }\n                else if(cmd.equals(\"show\")) {\n                }\n                else if(cmd.equals(\"addCli\")) {\n                    // var clientId = args[1];\n                }\n                else if(cmd.equals(\"saque\")) {\n                    // var accountId = Integer.parseInt(args[1]);\n                    // var value = Double.parseDouble(args[2]);\n                }\n                else if(cmd.equals(\"deposito\")) {\n                    // var accountId = Integer.parseInt(args[1]);\n                    // var value = Double.parseDouble(args[2]);\n                }\n                else if(cmd.equals(\"transf\")) {\n                    // var accountIdFrom = Integer.parseInt(args[1]);\n                    // var accountIdTo = Integer.parseInt(args[2]);\n                    // var value = Double.parseDouble(args[3]);\n                }\n                else if(cmd.equals(\"update\")) {\n                }\n                else {\n                    System.out.println(\"fail: comando invalido\");\n                }\n            } catch (Exception e) {\n                System.out.println(e.getMessage());\n            }\n        }\n    }\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <memory>\n#include <iomanip>\n#include <sstream>\n\nusing namespace std;\n\n\nint main() {\n    string line;\n\n    while (getline(cin, line)) {\n        try {\n            istringstream iss(line);\n            string cmd;\n            iss >> cmd;\n            cout << \"$\" << line << endl;\n\n            if (cmd == \"end\") {\n                break;\n            } else if (cmd == \"show\") {\n            } else if (cmd == \"addCli\") {\n                // string clientId;\n                // iss >> clientId;\n            } else if (cmd == \"saque\") {\n                // int accountId;\n                // double value;\n                // iss >> accountId >> value;\n            } else if (cmd == \"deposito\") {\n                // int accountId;\n                // double value;\n                // iss >> accountId >> value;\n            } else if (cmd == \"transf\") {\n                // int accountIdFrom, accountIdTo;\n                // double value;\n                // iss >> accountIdFrom >> accountIdTo >> value;\n            } else if (cmd == \"update\") {\n            } else {\n                cout << \"fail: comando invalido\" << endl;\n            }\n        } catch (const exception& e) {\n            cout << e.what() << endl;\n        }\n    }\n\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
