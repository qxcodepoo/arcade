{
    "title": "@cinema: Gerenciando reservas e cancelamentos de uma sala de cinema",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@cinema: Gerenciando reservas e cancelamentos de uma sala de cinema</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Gerenciando reservas e cancelamentos de uma sala de cinema</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cinema/cover.jpg\" /></p>\n<h2>Intro</h2>\n<p>O objetivo desta atividade \u00e9 implementar m\u00e9todos para manipular uma sala de cinema, permitindo a reserva, cancelamento e consulta de cadeiras.</p>\n<ul>\n<li>\n<p><strong>Descri\u00e7\u00e3o</strong></p>\n<ul>\n<li>A sala de cinema \u00e9 representada pela classe Sala <code>Theater</code>, que possui um conjunto de cadeiras, cada uma associada a um cliente ou vazia.</li>\n<li>Os m\u00e9todos a serem implementados permitir\u00e3o reservar uma cadeira para um cliente, cancelar a reserva de uma cadeira e consultar o estado das cadeiras na sala.</li>\n<li>Cada cadeira pode estar associada a um objeto Cliente <code>Client</code>, representando um cliente que reservou a cadeira, ou ser nula, indicando que a cadeira est\u00e1 vazia.</li>\n<li>Os m\u00e9todos fornecidos devem lidar com valida\u00e7\u00f5es, como verificar se a cadeira existe, se est\u00e1 ocupada e se o cliente j\u00e1 est\u00e1 presente na sala.</li>\n</ul>\n</li>\n<li>\n<p><strong>Responsabilidades</strong></p>\n<ul>\n<li>A classe Sala <code>Theater</code> \u00e9 respons\u00e1vel por gerenciar as opera\u00e7\u00f5es relacionadas \u00e0s cadeiras na sala de cinema.<ul>\n<li>M\u00e9todos a serem implementados:<ul>\n<li>p\u00fablicos: s\u00e3o m\u00e9todos acessados por outras classes.<ul>\n<li><code>reserve(id: string, phone: number, index: number)</code>: Reserva uma cadeira para um cliente com o ID e telefone especificados.</li>\n<li><code>cancel(id: string)</code>: Cancela a reserva de uma cadeira para o cliente com o ID especificado.</li>\n<li><code>getSeats(): Array&lt;Client | null&gt;</code>: Retorna um array contendo o estado atual de todas as cadeiras na sala.</li>\n<li><code>toString(): string</code>: Retorna uma representa\u00e7\u00e3o em string do estado atual das cadeiras na sala.</li>\n</ul>\n</li>\n<li>privados: s\u00e3o m\u00e9todos apenas de uso interno, utilizados para auxiliar as opera\u00e7\u00f5es da classe.<ul>\n<li><code>search(name: string): int</code>: Procura o \u00edndice da cadeira reservada pelo cliente com o nome especificado.</li>\n<li><code>verifyIndix(index: number)</code>: Verifica se um \u00edndice de cadeira \u00e9 v\u00e1lido na sala.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>A classe <code>Client</code> \u00e9 respons\u00e1vel por representar os clientes que reservam cadeiras na sala de cinema.<ul>\n<li>A classe possui m\u00e9todos para obter e definir o ID e telefone do cliente, bem como uma representa\u00e7\u00e3o em string do cliente.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img alt=\"diagrama\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cinema/diagrama.png\" /></p>\n<p><a href=\"https://youtu.be/T1eNw8HtDwY?si=LMVy6W6GHj6iOYda\"><img alt=\"youtube icon\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/cinema/../yousolver.png\" /></a></p>\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/cinema/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/cinema/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/cinema/.cache/draft/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE init 1</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span>\n<span class=\"c1\">#TEST_CASE init 2</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"o\">]</span>\n<span class=\"c1\">#TEST_CASE init 3</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE reservas</span>\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$reserve</span><span class=\"w\"> </span>davi<span class=\"w\"> </span><span class=\"m\">3232</span><span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"nv\">$reserve</span><span class=\"w\"> </span>joao<span class=\"w\"> </span><span class=\"m\">3131</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>davi:3232<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>joao:3131<span class=\"o\">]</span>\n\n<span class=\"c1\">#TEST_CASE ocupado</span>\n\n<span class=\"nv\">$reserve</span><span class=\"w\"> </span>rute<span class=\"w\"> </span><span class=\"m\">3030</span><span class=\"w\"> </span><span class=\"m\">0</span>\nfail:<span class=\"w\"> </span>cadeira<span class=\"w\"> </span>ja<span class=\"w\"> </span>esta<span class=\"w\"> </span>ocupada\n\n<span class=\"c1\">#TEST_CASE duplicado</span>\n\n<span class=\"nv\">$reserve</span><span class=\"w\"> </span>davi<span class=\"w\"> </span><span class=\"m\">3234</span><span class=\"w\"> </span><span class=\"m\">2</span>\nfail:<span class=\"w\"> </span>cliente<span class=\"w\"> </span>ja<span class=\"w\"> </span>esta<span class=\"w\"> </span>no<span class=\"w\"> </span>cinema\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE cadeira invalida</span>\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$reserve</span><span class=\"w\"> </span>davi<span class=\"w\"> </span><span class=\"m\">3232</span><span class=\"w\"> </span><span class=\"m\">5</span>\nfail:<span class=\"w\"> </span>cadeira<span class=\"w\"> </span>nao<span class=\"w\"> </span>existe\n\n<span class=\"c1\">#TEST_CASE cancelamentos</span>\n\n<span class=\"nv\">$reserve</span><span class=\"w\"> </span>davi<span class=\"w\"> </span><span class=\"m\">3232</span><span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"nv\">$reserve</span><span class=\"w\"> </span>joao<span class=\"w\"> </span><span class=\"m\">3131</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$cancel</span><span class=\"w\"> </span>davi\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>joao:3131<span class=\"o\">]</span>\n\n<span class=\"c1\">#TEST_CASE cancelamentos errado</span>\n\n<span class=\"nv\">$cancel</span><span class=\"w\"> </span>rita\nfail:<span class=\"w\"> </span>cliente<span class=\"w\"> </span>nao<span class=\"w\"> </span>esta<span class=\"w\"> </span>no<span class=\"w\"> </span>cinema\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>-<span class=\"w\"> </span>joao:3131<span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT init 1\nshow\nend\n======== EXPECT\n$show\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT init 2\nshow\ninit 5\nshow\nend\n======== EXPECT\n$show\n[]\n$init 5\n$show\n[- - - - -]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT init 3\nshow\ninit 5\nshow\ninit 4\nshow\nend\n======== EXPECT\n$show\n[]\n$init 5\n$show\n[- - - - -]\n$init 4\n$show\n[- - - -]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT reservas\ninit 4\nreserve davi 3232 0\nreserve joao 3131 3\nshow\nend\n======== EXPECT\n$init 4\n$reserve davi 3232 0\n$reserve joao 3131 3\n$show\n[davi:3232 - - joao:3131]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT ocupado\ninit 4\nreserve davi 3232 0\nreserve joao 3131 3\nshow\nreserve rute 3030 0\nend\n======== EXPECT\n$init 4\n$reserve davi 3232 0\n$reserve joao 3131 3\n$show\n[davi:3232 - - joao:3131]\n$reserve rute 3030 0\nfail: cadeira ja esta ocupada\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT duplicado\ninit 4\nreserve davi 3232 0\nreserve joao 3131 3\nshow\nreserve rute 3030 0\nreserve davi 3234 2\nend\n======== EXPECT\n$init 4\n$reserve davi 3232 0\n$reserve joao 3131 3\n$show\n[davi:3232 - - joao:3131]\n$reserve rute 3030 0\nfail: cadeira ja esta ocupada\n$reserve davi 3234 2\nfail: cliente ja esta no cinema\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT cadeira invalida\ninit 4\nreserve davi 3232 5\nend\n======== EXPECT\n$init 4\n$reserve davi 3232 5\nfail: cadeira nao existe\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT cancelamentos\ninit 4\nreserve davi 3232 5\nreserve davi 3232 0\nreserve joao 3131 3\ncancel davi\nshow\nend\n======== EXPECT\n$init 4\n$reserve davi 3232 5\nfail: cadeira nao existe\n$reserve davi 3232 0\n$reserve joao 3131 3\n$cancel davi\n$show\n[- - - joao:3131]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT cancelamentos errado\ninit 4\nreserve davi 3232 5\nreserve davi 3232 0\nreserve joao 3131 3\ncancel davi\nshow\ncancel rita\nshow\nend\n======== EXPECT\n$init 4\n$reserve davi 3232 5\nfail: cadeira nao existe\n$reserve davi 3232 0\n$reserve joao 3131 3\n$cancel davi\n$show\n[- - - joao:3131]\n$cancel rita\nfail: cliente nao esta no cinema\n$show\n[- - - joao:3131]\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\n\n\nfunction main() {\n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd === \"end\") {\n            break;\n        } else if (cmd === \"show\") { \n        } else if (cmd === \"init\") {\n            // const seats = parseInt(par[1], 10);\n        } else if (cmd === \"reserve\") {\n            // const id = par[1];\n            // const phone = parseInt(par[2]);\n            // const index = parseInt(par[3], 10);\n        } else if (cmd === \"cancel\") {\n            // const id = par[1];\n        } else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n\npublic class Shell {\n    public static void main(String[] _args) {\n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var args = line.split(\" \");\n            var cmd = args[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"show\")) { \n            }\n            else if (cmd.equals(\"init\")) {\n                // var seats = Integer.parseInt(args[1]);\n            }\n            else if (cmd.equals(\"reserve\")) {\n                // var id = args[1];\n                // var phone = args[2];\n                // var index = Integer.parseInt(args[3]);\n            }\n            else if (cmd.equals(\"cancel\")) {\n                // var id = args[1];\n            }\n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include <memory>\nusing namespace std;\n\ntemplate<class CONTAINER, class FUNC>\nstring map_join(const CONTAINER& c, FUNC f, string sep) {\n    stringstream ss;\n    for (auto it = c.begin(); it != c.end(); it++) {\n        ss << (it == c.begin() ? \"\" : sep);\n        ss << f(*it);\n    }\n    return ss.str();\n}\n\nint main() {\n\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;    \n        } else if (cmd == \"show\") {\n        } else if (cmd == \"init\") {\n            // int qtd;\n            // ss >> qtd;\n        } else if (cmd == \"reserve\") {\n            // string id, phone;\n            // int index;\n            // ss >> id >> phone >> index;\n        } else if (cmd == \"cancel\") {\n            // string id;\n            // ss >> id;\n        } else {\n            cout << \"fail: comando invalido\" << endl;\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
