{
    "title": "@shapes: Utilizando interface em c\u00edrculos e ret\u00e2ngulos",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@shapes: Utilizando interface em c\u00edrculos e ret\u00e2ngulos</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Utilizando interface em c\u00edrculos e ret\u00e2ngulos</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/shapes/cover.jpg\" /></p>\n<h2>Intro</h2>\n<p>O objetivo desta atividade \u00e9 implementar um sistema para gerenciar formas geom\u00e9tricas. Voc\u00ea precisar\u00e1 criar classes para representar pontos, c\u00edrculos e ret\u00e2ngulos.</p>\n<ul>\n<li><strong>Descri\u00e7\u00e3o</strong><ul>\n<li>A interface <code>Shape</code> define m\u00e9todos que todas as formas geom\u00e9tricas devem implementar.</li>\n<li>A classe <code>Point2D</code> representa um ponto no plano bidimensional.</li>\n<li>As classes <code>Circle</code> e <code>Rectangle</code> implementam a interface <code>Shape</code> e representam um c\u00edrculo e um ret\u00e2ngulo, respectivamente.</li>\n</ul>\n</li>\n</ul>\n<h3>Interface Shape</h3>\n<p>A interface <code>Shape</code> exige a implementa\u00e7\u00e3o dos seguintes m\u00e9todos (os m\u00e9todos abaixo n\u00e3o s\u00e3o implementadas na classe Shape, apenas nas classes filhas):</p>\n<ul>\n<li><code>getArea()</code>: Retorna a \u00e1rea da forma.</li>\n<li><code>getPerimeter()</code>: Retorna o per\u00edmetro da forma.</li>\n<li><code>getName()</code>: Retorna o nome da forma.</li>\n</ul>\n<h3>Classe Point2D</h3>\n<p>A classe <code>Point2D</code> representa um ponto no plano bidimensional e possui:</p>\n<ul>\n<li><strong>Atributos:</strong><ul>\n<li><code>x</code>: coordenada x do ponto.</li>\n<li><code>y</code>: coordenada y do ponto.</li>\n</ul>\n</li>\n<li><strong>M\u00e9todos:</strong><ul>\n<li><code>constructor(x: number, y: number)</code>: Inicializa os atributos x e y.</li>\n<li><code>toString()</code>: Retorna a representa\u00e7\u00e3o do ponto no formato <code>(x, y)</code>. Exemplo: <code>(0.00, 0.00)</code>.</li>\n</ul>\n</li>\n</ul>\n<h3>Classe Circle</h3>\n<p>A classe <code>Circle</code> implementa a interface <code>Shape</code> e representa um c\u00edrculo. Deve incluir:</p>\n<ul>\n<li><strong>Atributos:</strong><ul>\n<li><code>name</code>: Nome da forma, que \u00e9 \"Circ\".</li>\n<li><code>center</code>: Centro do c\u00edrculo, representado por um <code>Point2D</code>.</li>\n<li><code>radius</code>: Raio do c\u00edrculo.</li>\n</ul>\n</li>\n<li><strong>M\u00e9todos:</strong><ul>\n<li><code>constructor(center: Point2D, radius: number)</code>: Inicializa os atributos center e radius.</li>\n<li><code>getName()</code>: Retorna o nome \"Circ\".</li>\n<li><code>getArea()</code>: Calcula e retorna a \u00e1rea do c\u00edrculo usando a f\u00f3rmula <code>\u03c0 * raio\u00b2</code>.</li>\n<li><code>getPerimeter()</code>: Calcula e retorna o per\u00edmetro do c\u00edrculo usando a f\u00f3rmula <code>2 * \u03c0 * raio</code>.</li>\n<li><code>toString()</code>: Retorna uma string no formato <code>Circ: C=(x, y), R=radius</code>.</li>\n</ul>\n</li>\n</ul>\n<h3>Classe Rectangle</h3>\n<p>A classe <code>Rectangle</code> tamb\u00e9m implementa a interface <code>Shape</code> e representa um ret\u00e2ngulo. Deve incluir:</p>\n<ul>\n<li><strong>Atributos:</strong><ul>\n<li><code>name</code>: Nome da forma, que \u00e9 \"Rect\".</li>\n<li><code>p1</code>: Um v\u00e9rtice do ret\u00e2ngulo (ponto superior esquerdo), representado por um <code>Point2D</code>.</li>\n<li><code>p2</code>: O v\u00e9rtice oposto do ret\u00e2ngulo (ponto inferior direto), representado por um <code>Point2D</code>.</li>\n</ul>\n</li>\n<li><strong>M\u00e9todos:</strong><ul>\n<li><code>constructor(p1: Point2D, p2: Point2D)</code>: Inicializa os atributos p1 e p2.</li>\n<li><code>getName()</code>: Retorna o nome \"Rect\".</li>\n<li><code>getArea()</code>: Calcula e retorna a \u00e1rea do ret\u00e2ngulo usando a f\u00f3rmula <code>largura * altura</code>.<ul>\n<li><code>largura</code> \u00e9 a diferen\u00e7a absoluta entre <code>x</code> de <code>p1</code> e <code>p2</code>.</li>\n<li><code>altura</code> \u00e9 a diferen\u00e7a absoluta entre <code>y</code> de <code>p1</code> e <code>p2</code>.</li>\n</ul>\n</li>\n<li><code>getPerimeter()</code>: Calcula e retorna o per\u00edmetro do ret\u00e2ngulo usando a f\u00f3rmula <code>2 * (largura + altura)</code>.</li>\n<li><code>toString()</code>: Retorna uma string no formato \"Rect: P1=(x1, y1) P2=(x2, y2)\".</li>\n</ul>\n</li>\n</ul>\n<h3>Fun\u00e7\u00e3o principal</h3>\n<ul>\n<li>Crie um vetor de shapes para gerenciar.</li>\n<li>Nas a\u00e7\u00f5es <code>circle</code> e <code>rect</code>, instancie o objeto adequado e adicione-o ao vetor de shapes.</li>\n</ul>\n<h2>Guide</h2>\n<p><img alt=\"diagrama\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/shapes/diagrama.png\" /></p>\n<p><a href=\"https://youtu.be/VMHI9mjIwZQ?si=jUgIc0AT9YY3Dc7K\"><img alt=\"youtube icon\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/shapes/..//yousolver.png\" /></a></p>\n<h2>Shell</h2>\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE creating figures</span>\n<span class=\"nv\">$circle</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">5</span>\n\n<span class=\"c1\">#TEST_CASE showing</span>\n<span class=\"nv\">$show</span>\nCirc:<span class=\"w\"> </span><span class=\"nv\">C</span><span class=\"o\">=(</span><span class=\"m\">2</span>.00,<span class=\"w\"> </span><span class=\"m\">3</span>.00<span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"nv\">R</span><span class=\"o\">=</span><span class=\"m\">5</span>.00\n\n<span class=\"c1\">#TEST_CASE creating more figures</span>\n<span class=\"nv\">$rect</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$rect</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">4</span>.53<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">10</span>\n<span class=\"nv\">$circle</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">1</span>.5\n\n<span class=\"c1\">#TEST_CASE showing all</span>\n<span class=\"nv\">$show</span>\nCirc:<span class=\"w\"> </span><span class=\"nv\">C</span><span class=\"o\">=(</span><span class=\"m\">2</span>.00,<span class=\"w\"> </span><span class=\"m\">3</span>.00<span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"nv\">R</span><span class=\"o\">=</span><span class=\"m\">5</span>.00\nRect:<span class=\"w\"> </span><span class=\"nv\">P1</span><span class=\"o\">=(</span><span class=\"m\">1</span>.00,<span class=\"w\"> </span><span class=\"m\">1</span>.00<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"nv\">P2</span><span class=\"o\">=(</span><span class=\"m\">3</span>.00,<span class=\"w\"> </span><span class=\"m\">3</span>.00<span class=\"o\">)</span>\nRect:<span class=\"w\"> </span><span class=\"nv\">P1</span><span class=\"o\">=(</span><span class=\"m\">2</span>.00,<span class=\"w\"> </span><span class=\"m\">4</span>.53<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"nv\">P2</span><span class=\"o\">=(</span><span class=\"m\">5</span>.00,<span class=\"w\"> </span><span class=\"m\">10</span>.00<span class=\"o\">)</span>\nCirc:<span class=\"w\"> </span><span class=\"nv\">C</span><span class=\"o\">=(</span><span class=\"m\">1</span>.00,<span class=\"w\"> </span><span class=\"m\">1</span>.00<span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"nv\">R</span><span class=\"o\">=</span><span class=\"m\">1</span>.50\n\n\n<span class=\"c1\">#TEST_CASE showing area and perimeter</span>\n<span class=\"nv\">$info</span>\nCirc:<span class=\"w\"> </span><span class=\"nv\">A</span><span class=\"o\">=</span><span class=\"m\">78</span>.54<span class=\"w\"> </span><span class=\"nv\">P</span><span class=\"o\">=</span><span class=\"m\">31</span>.42\nRect:<span class=\"w\"> </span><span class=\"nv\">A</span><span class=\"o\">=</span><span class=\"m\">4</span>.00<span class=\"w\"> </span><span class=\"nv\">P</span><span class=\"o\">=</span><span class=\"m\">8</span>.00\nRect:<span class=\"w\"> </span><span class=\"nv\">A</span><span class=\"o\">=</span><span class=\"m\">16</span>.41<span class=\"w\"> </span><span class=\"nv\">P</span><span class=\"o\">=</span><span class=\"m\">16</span>.94\nCirc:<span class=\"w\"> </span><span class=\"nv\">A</span><span class=\"o\">=</span><span class=\"m\">7</span>.07<span class=\"w\"> </span><span class=\"nv\">P</span><span class=\"o\">=</span><span class=\"m\">9</span>.42\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/shapes/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/shapes/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/shapes/.cache/draft/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT creating figures\ncircle 2 3 5\nend\n======== EXPECT\n$circle 2 3 5\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT showing\ncircle 2 3 5\nshow\nend\n======== EXPECT\n$circle 2 3 5\n$show\nCirc: C=(2.00, 3.00), R=5.00\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT creating more figures\ncircle 2 3 5\nshow\nrect 1 1 3 3\nrect 2 4.53 5 10\ncircle 1 1 1.5\nend\n======== EXPECT\n$circle 2 3 5\n$show\nCirc: C=(2.00, 3.00), R=5.00\n$rect 1 1 3 3\n$rect 2 4.53 5 10\n$circle 1 1 1.5\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT showing all\ncircle 2 3 5\nshow\nrect 1 1 3 3\nrect 2 4.53 5 10\ncircle 1 1 1.5\nshow\nend\n======== EXPECT\n$circle 2 3 5\n$show\nCirc: C=(2.00, 3.00), R=5.00\n$rect 1 1 3 3\n$rect 2 4.53 5 10\n$circle 1 1 1.5\n$show\nCirc: C=(2.00, 3.00), R=5.00\nRect: P1=(1.00, 1.00) P2=(3.00, 3.00)\nRect: P1=(2.00, 4.53) P2=(5.00, 10.00)\nCirc: C=(1.00, 1.00), R=1.50\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT showing area and perimeter\ncircle 2 3 5\nshow\nrect 1 1 3 3\nrect 2 4.53 5 10\ncircle 1 1 1.5\nshow\ninfo\nend\n======== EXPECT\n$circle 2 3 5\n$show\nCirc: C=(2.00, 3.00), R=5.00\n$rect 1 1 3 3\n$rect 2 4.53 5 10\n$circle 1 1 1.5\n$show\nCirc: C=(2.00, 3.00), R=5.00\nRect: P1=(1.00, 1.00) P2=(3.00, 3.00)\nRect: P1=(2.00, 4.53) P2=(5.00, 10.00)\nCirc: C=(1.00, 1.00), R=1.50\n$info\nCirc: A=78.54 P=31.42\nRect: A=4.00 P=8.00\nRect: A=16.41 P=16.94\nCirc: A=7.07 P=9.42\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\nfunction main() {\n    // const shapes: Shape[] = [];\n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        }\n        else if (cmd == \"show\") {\n        }\n        else if (cmd == \"circle\") {\n            // const x = parseFloat(par[1]);\n            // const y = parseFloat(par[2]);\n            // const r = parseFloat(par[3]);\n        }\n        else if (cmd == \"rect\") {\n            // const x1 = parseFloat(par[1]);\n            // const y1 = parseFloat(par[2]);\n            // const x2 = parseFloat(par[3]);\n            // const y2 = parseFloat(par[4]);\n        }\n        else if (cmd == \"info\") {\n        }\n        else {\n            console.log(\"fail: invalid command\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\nimport java.util.stream.Collectors;\nimport java.text.DecimalFormat;\n\npublic class Shell {\n\n    // public static String info(Shape shape) {\n    //     DecimalFormat df = new DecimalFormat(\"#.00\");\n    //     return String.format(\"%s: A=%s P=%s\", shape.getName(), df.format(shape.getArea()), df.format(shape.getPerimeter()));   \n    // }\n    public static void main(String[] a) {\n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n    \n            var par = line.split(\" \");\n            var cmd = par[0];\n            \n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"show\")) {\n            }\n            else if (cmd.equals(\"circle\")) {\n                // var x = Double.parseDouble(par[1]);\n                // var y = Double.parseDouble(par[2]);\n                // var radius = Double.parseDouble(par[3]);\n            }\n            else if (cmd.equals(\"rect\")) {\n                // var x1 = Double.parseDouble(par[1]);\n                // var y1 = Double.parseDouble(par[2]);\n                // var x2 = Double.parseDouble(par[3]);\n                // var y2 = Double.parseDouble(par[4]);\n            }\n            else if (cmd.equals(\"info\")) {\n            }\n            else {\n                System.out.println(\"Comando inv\u00e1lido\");\n            }\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <memory>\n#include <cmath>\n#include <iomanip>\nusing namespace std;\n\ntemplate <typename CONTAINER, typename FUNC>\nauto map_join(const CONTAINER& c, FUNC f, const string& sep = \", \") {\n    stringstream ss;\n    for (auto it = c.begin(); it != c.end(); ++it) {\n        ss << (it != c.begin() ? sep : \"\");\n        ss << f(*it);\n    }\n    return ss.str();\n}\n\nint main() {\n    // vector<shared_ptr<Shape>> shapes;\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\")  { \n            break;                                  \n        }\n        else if (cmd == \"show\") { \n            // Imprima as formas, uma por linha\n        }\n        else if (cmd == \"circle\") { \n            // Crie um novo circulo e adicione ao vetor\n            // double x{}, y{}, radius{};\n            // ss >> x >> y >> radius;\n        }\n        else if (cmd == \"rect\") {\n            // Crie um retangulo e insira no vetor\n            // double x1{}, y1{}, x2{}, y2{};\n            // ss >> x1 >> y1 >> x2 >> y2;\n        }\n        else if (cmd == \"info\") {\n            // Imprima as informa\u00e7\u00f5es de \u00e1rea e per\u00edmetro de todas as formas\n        }\n        else {\n            cout << \"fail: comando inv\u00e1lido\" << '\\n';\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
