{
    "title": "@relogio: Garante uma hora v\u00e1lida no rel\u00f3gio",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@relogio: Garante uma hora v\u00e1lida no rel\u00f3gio</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Garante uma hora v\u00e1lida no rel\u00f3gio</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/relogio/cover.jpg\" /></p>\n<h2>Intro</h2>\n<p>Seu objetivo \u00e9 construtir uma Classe Rel\u00f3gio <code>Watch</code> que garanta que a hora, minuto e segundo sejam v\u00e1lidos.</p>\n<ul>\n<li>Construtor<ul>\n<li>O construtor deve receber 3 par\u00e2metros, hora, minuto e segundo.</li>\n<li>Para fazer a inicializa\u00e7\u00e3o dos 3 par\u00e2metros, utilize os m\u00e9todos set.</li>\n</ul>\n</li>\n<li>Crie os m\u00e9todos getters e setters para cada atributo.<ul>\n<li>Os m\u00e9todos set devem garantir que os valor atribu\u00eddo sempre seja v\u00e1lido, ou n\u00e3o realize nenhuma mudan\u00e7a.</li>\n</ul>\n</li>\n<li><code>toString</code><ul>\n<li>Crie um m\u00e9todo que imprime a hora no formato HH:MM:SS.</li>\n<li>Voc\u00ea precisar\u00e1 pesquisar como formatar n\u00fameros menores que 10 com 2 d\u00edgitos (ex: 01, 02, 03).</li>\n</ul>\n</li>\n<li>Nos m\u00e9todos set, realize a valida\u00e7\u00e3o dos valores.<ul>\n<li>Hora deve ser entre 0 e 23.</li>\n<li>Minuto e segundo devem ser entre 0 e 59.</li>\n</ul>\n</li>\n<li>Pr\u00f3ximo Segundo <code>nextSecond</code><ul>\n<li>Crie um m\u00e9todo nextSecond que incrementa o segundo em 1.</li>\n<li>Se o segundo for 59, ele deve ser zerado e o minuto incrementado.</li>\n<li>Se o minuto for 59, ele deve ser zerado e a hora incrementada.</li>\n<li>Se a hora for 23, ela deve ser zerada.</li>\n</ul>\n</li>\n</ul>\n<p><img alt=\"diagrama\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/relogio/diagrama.png\" /></p>\n<h2>Guide</h2>\n<p><a href=\"https://youtu.be/7vD5le9DeZE?si=uA_wG0fD8HBN_At5\"><img alt=\"youtube icon\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/animal/../yousolver.png\" /></a></p>\n<p>Para formatar com 2 d\u00edgitos utilize a seguinte estrat\u00e9gia:</p>\n<div class=\"language-java highlight\"><pre><span></span><code><span class=\"c1\">//java</span>\n<span class=\"kd\">public</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"nf\">toString</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"p\">.</span><span class=\"na\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;%02d:%02d:%02d&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hora</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">minuto</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">segundo</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"language-cpp highlight\"><pre><span></span><code><span class=\"c1\">//cpp</span>\n<span class=\"c1\">//strinstream \u00e9 uma classe da biblioteca sstream</span>\n<span class=\"c1\">//setfill e setw s\u00e3o fun\u00e7\u00f5es da biblioteca iomanip</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"nf\">str</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">stringstream</span><span class=\"w\"> </span><span class=\"n\">ss</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">ss</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">setfill</span><span class=\"p\">(</span><span class=\"sc\">&#39;0&#39;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">setw</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">hour</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;:&quot;</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">ss</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">setfill</span><span class=\"p\">(</span><span class=\"sc\">&#39;0&#39;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">setw</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">minute</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;:&quot;</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">ss</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">setfill</span><span class=\"p\">(</span><span class=\"sc\">&#39;0&#39;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">setw</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">second</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ss</span><span class=\"p\">.</span><span class=\"n\">str</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"language-ts highlight\"><pre><span></span><code><span class=\"c1\">//typescript</span>\n<span class=\"k\">public</span><span class=\"w\"> </span><span class=\"nx\">toString</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">hora</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">hora</span><span class=\"p\">).</span><span class=\"nx\">padStart</span><span class=\"p\">(</span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">&#39;0&#39;</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">minuto</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">minuto</span><span class=\"p\">).</span><span class=\"nx\">padStart</span><span class=\"p\">(</span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">&#39;0&#39;</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">segundo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">segundo</span><span class=\"p\">).</span><span class=\"nx\">padStart</span><span class=\"p\">(</span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">&#39;0&#39;</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">hora</span><span class=\"si\">}</span><span class=\"sb\">:</span><span class=\"si\">${</span><span class=\"nx\">minuto</span><span class=\"si\">}</span><span class=\"sb\">:</span><span class=\"si\">${</span><span class=\"nx\">segundo</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE set</span>\n<span class=\"nv\">$show</span>\n<span class=\"m\">00</span>:00:00\n\n<span class=\"c1\">#TEST_CASE set</span>\n\n<span class=\"nv\">$set</span><span class=\"w\"> </span><span class=\"m\">10</span><span class=\"w\"> </span><span class=\"m\">02</span><span class=\"w\"> </span><span class=\"m\">30</span>\n<span class=\"nv\">$show</span><span class=\"w\"> </span>\n<span class=\"m\">10</span>:02:30\n\n<span class=\"c1\">#TEST_CASE set2</span>\n<span class=\"nv\">$set</span><span class=\"w\"> </span><span class=\"m\">15</span><span class=\"w\"> </span><span class=\"m\">50</span><span class=\"w\"> </span><span class=\"m\">59</span>\n<span class=\"nv\">$show</span>\n<span class=\"m\">15</span>:50:59\n\n<span class=\"c1\">#TEST_CASE error</span>\n\n<span class=\"nv\">$set</span><span class=\"w\"> </span><span class=\"m\">25</span><span class=\"w\"> </span><span class=\"m\">10</span><span class=\"w\"> </span><span class=\"m\">30</span>\nfail:<span class=\"w\"> </span>hora<span class=\"w\"> </span>invalida\n\n<span class=\"nv\">$show</span>\n<span class=\"m\">15</span>:10:30\n\n<span class=\"c1\">#TEST_CASE error2</span>\n<span class=\"nv\">$set</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">70</span><span class=\"w\"> </span><span class=\"m\">50</span>\nfail:<span class=\"w\"> </span>minuto<span class=\"w\"> </span>invalido\n<span class=\"nv\">$show</span>\n<span class=\"m\">01</span>:10:50\n\n<span class=\"c1\">#TEST_CASE error3</span>\n<span class=\"nv\">$set</span><span class=\"w\"> </span><span class=\"m\">23</span><span class=\"w\"> </span><span class=\"m\">59</span><span class=\"w\"> </span><span class=\"m\">70</span>\nfail:<span class=\"w\"> </span>segundo<span class=\"w\"> </span>invalido\n<span class=\"nv\">$show</span>\n<span class=\"m\">23</span>:59:50\n\n<span class=\"c1\">#TEST_CASE next</span>\n<span class=\"nv\">$set</span><span class=\"w\"> </span><span class=\"m\">15</span><span class=\"w\"> </span><span class=\"m\">59</span><span class=\"w\"> </span><span class=\"m\">59</span>\n<span class=\"nv\">$show</span>\n<span class=\"m\">15</span>:59:59\n\n<span class=\"c1\">#TEST_CASE next2</span>\n\n<span class=\"nv\">$next</span>\n<span class=\"nv\">$show</span>\n<span class=\"m\">16</span>:00:00\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<hr />\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE set</span>\n<span class=\"nv\">$set</span><span class=\"w\"> </span><span class=\"m\">23</span><span class=\"w\"> </span><span class=\"m\">59</span><span class=\"w\"> </span><span class=\"m\">59</span>\n<span class=\"nv\">$show</span>\n<span class=\"m\">23</span>:59:59\n\n<span class=\"c1\">#TEST_CASE next3</span>\n\n<span class=\"nv\">$next</span>\n<span class=\"nv\">$show</span>\n<span class=\"m\">00</span>:00:00\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<hr />\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE init</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">10</span><span class=\"w\"> </span><span class=\"m\">20</span><span class=\"w\"> </span><span class=\"m\">30</span>\n<span class=\"nv\">$show</span>\n<span class=\"m\">10</span>:20:30\n\n<span class=\"c1\">#TEST_CASE init2</span>\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">90</span><span class=\"w\"> </span><span class=\"m\">20</span><span class=\"w\"> </span><span class=\"m\">30</span>\nfail:<span class=\"w\"> </span>hora<span class=\"w\"> </span>invalida\n\n<span class=\"nv\">$show</span>\n<span class=\"m\">00</span>:20:30\n\n<span class=\"c1\">#TEST_CASE init3</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">90</span><span class=\"w\"> </span><span class=\"m\">100</span><span class=\"w\"> </span><span class=\"m\">60</span>\nfail:<span class=\"w\"> </span>hora<span class=\"w\"> </span>invalida\nfail:<span class=\"w\"> </span>minuto<span class=\"w\"> </span>invalido\nfail:<span class=\"w\"> </span>segundo<span class=\"w\"> </span>invalido\n\n<span class=\"nv\">$show</span>\n<span class=\"m\">00</span>:00:00\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/relogio/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/relogio/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/relogio/.cache/draft/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT set\nshow\nend\n======== EXPECT\n$show\n00:00:00\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT set\nshow\nset 10 02 30\nshow \nend\n======== EXPECT\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT set2\nshow\nset 10 02 30\nshow \nset 15 50 59\nshow\nend\n======== EXPECT\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$set 15 50 59\n$show\n15:50:59\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT error\nshow\nset 10 02 30\nshow \nset 15 50 59\nshow\nset 25 10 30\nshow\nend\n======== EXPECT\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$set 15 50 59\n$show\n15:50:59\n$set 25 10 30\nfail: hora invalida\n$show\n15:10:30\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT error2\nshow\nset 10 02 30\nshow \nset 15 50 59\nshow\nset 25 10 30\nshow\nset 1 70 50\nshow\nend\n======== EXPECT\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$set 15 50 59\n$show\n15:50:59\n$set 25 10 30\nfail: hora invalida\n$show\n15:10:30\n$set 1 70 50\nfail: minuto invalido\n$show\n01:10:50\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT error3\nshow\nset 10 02 30\nshow \nset 15 50 59\nshow\nset 25 10 30\nshow\nset 1 70 50\nshow\nset 23 59 70\nshow\nend\n======== EXPECT\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$set 15 50 59\n$show\n15:50:59\n$set 25 10 30\nfail: hora invalida\n$show\n15:10:30\n$set 1 70 50\nfail: minuto invalido\n$show\n01:10:50\n$set 23 59 70\nfail: segundo invalido\n$show\n23:59:50\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT next\nshow\nset 10 02 30\nshow \nset 15 50 59\nshow\nset 25 10 30\nshow\nset 1 70 50\nshow\nset 23 59 70\nshow\nset 15 59 59\nshow\nend\n======== EXPECT\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$set 15 50 59\n$show\n15:50:59\n$set 25 10 30\nfail: hora invalida\n$show\n15:10:30\n$set 1 70 50\nfail: minuto invalido\n$show\n01:10:50\n$set 23 59 70\nfail: segundo invalido\n$show\n23:59:50\n$set 15 59 59\n$show\n15:59:59\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT next2\nshow\nset 10 02 30\nshow \nset 15 50 59\nshow\nset 25 10 30\nshow\nset 1 70 50\nshow\nset 23 59 70\nshow\nset 15 59 59\nshow\nnext\nshow\nend\n======== EXPECT\n$show\n00:00:00\n$set 10 02 30\n$show \n10:02:30\n$set 15 50 59\n$show\n15:50:59\n$set 25 10 30\nfail: hora invalida\n$show\n15:10:30\n$set 1 70 50\nfail: minuto invalido\n$show\n01:10:50\n$set 23 59 70\nfail: segundo invalido\n$show\n23:59:50\n$set 15 59 59\n$show\n15:59:59\n$next\n$show\n16:00:00\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT set\nset 23 59 59\nshow\nend\n======== EXPECT\n$set 23 59 59\n$show\n23:59:59\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT next3\nset 23 59 59\nshow\nnext\nshow\nend\n======== EXPECT\n$set 23 59 59\n$show\n23:59:59\n$next\n$show\n00:00:00\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT init\ninit 10 20 30\nshow\nend\n======== EXPECT\n$init 10 20 30\n$show\n10:20:30\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT init2\ninit 10 20 30\nshow\ninit 90 20 30\nshow\nend\n======== EXPECT\n$init 10 20 30\n$show\n10:20:30\n$init 90 20 30\nfail: hora invalida\n$show\n00:20:30\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT init3\ninit 10 20 30\nshow\ninit 90 20 30\nshow\ninit 90 100 60\nshow\nend\n======== EXPECT\n$init 10 20 30\n$show\n10:20:30\n$init 90 20 30\nfail: hora invalida\n$show\n00:20:30\n$init 90 100 60\nfail: hora invalida\nfail: minuto invalido\nfail: segundo invalido\n$show\n00:00:00\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\nfunction main() {\n    // CRIE SEU REL\u00d3GIO AQUI\n    while (true) {\n        let line = input();\n        console.log(\"$\" + line);\n\n        const args = line.split(\" \");\n        const cmd = args[0];\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"show\") {\n            // MOSTRE SEU REL\u00d3GIO AQUI\n        } else if (cmd == \"init\") {\n            // INICIE SEU REL\u00d3GIO AQUI UTILIZANDO O CONSTRUTOR\n            // const hour = parseInt(args[1]);\n            // const minute = parseInt(args[2]);\n            // const second = parseInt(args[3]);\n        } else if (cmd == \"set\") {\n            // AJUSTE SEU REL\u00d3GIO AQUI CHAMANDO OS M\u00c9TODOS setHour, setMinute e setSecond\n            // const hour = parseInt(args[1]);\n            // const minute = parseInt(args[2]);\n            // const second = parseInt(args[3]);\n        } else if (cmd == \"next\") {\n            // AVANCE SEU REL\u00d3GIO AQUI CHAMANDO O M\u00c9TODO nextSecond\n        } else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain()\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\n\n\npublic class Shell {\n    public static void main(String[] a) {\n        // CRIE SEU REL\u00d3GIO AQUI\n        \n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"show\")) {\n                // MOSTRE O REL\u00d3GIO AQUI\n            }\n            else if (cmd.equals(\"init\")) {\n                // INICIE O REL\u00d3GIO AQUI utilizando o construtor\n                // int hour = Integer.parseInt(par[1]);\n                // int minute = Integer.parseInt(par[2]);\n                // int second = Integer.parseInt(par[3]);\n            }\n            else if (cmd.equals(\"set\")) {\n                // CHAME OS M\u00c9TODOS SET AQUI\n                // int hour = Integer.parseInt(par[1]);\n                // int minute = Integer.parseInt(par[2]);\n                // int second = Integer.parseInt(par[3]);\n            }\n            else if (cmd.equals(\"next\")) {\n                // CHAME O M\u00c9TODO nextSecond AQUI\n            }\n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <sstream>\n#include <iomanip> // std::setfill, std::setw\nusing namespace std;\n\nint main() {\n    // CRIE SEU REL\u00d3GIO AQUI\n\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"set\") {\n            \n            // Chame os m\u00e9todos setHour, setMinute e setSecond\n            // int hour {}, minute {}, second {};\n            // ss >> hour >> minute >> second;\n        } else if (cmd == \"init\") {\n            \n            // Chame o construtor para inicializar o rel\u00f3gio\n            // int hour {}, minute {}, second {};\n            // ss >> hour >> minute >> second;\n        } else if (cmd == \"show\") {\n            \n            // Chame o m\u00e9todo str e imprima o hor\u00e1rio\n            // cout << time.str() << endl;\n        } else if (cmd == \"next\") {\n            \n            // Chame o m\u00e9todo nextSecond\n            // time.nextSecond();\n        } else {\n            cout << \"fail: comando invalido\" << endl;\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
