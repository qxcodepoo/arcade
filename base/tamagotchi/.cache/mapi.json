{
    "title": "@tamagotchi: Alimente, brinque e mate",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@tamagotchi: Alimente, brinque e mate</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Alimente, brinque e mate</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/tamagotchi/cover.jpg\" /></p>\n<p>Voc\u00ea deve implementar um simulador de bichinho virtual. Ele poder\u00e1 brincar, dormir e tomar banho. E eventualmente morrer\u00e1, se voc\u00ea n\u00e3o cuidar bem dele.</p>\n<hr />\n<h2>Intro</h2>\n<p>Seu sistema dever\u00e1:</p>\n<ul>\n<li>Classe <code>Tamagochi</code><ul>\n<li>\u00c9 respons\u00e1vel por armazenar os dados relativos ao bichinho, controlar os limites permitidos para os atributos e registrar a morte.</li>\n<li>Construtor<ul>\n<li>Recebe energia m\u00e1xima<code>energyMax</code> e limpeza m\u00e1xima <code>cleanMax</code> do pet que representam os valores m\u00e1ximo de energia e limpeza.</li>\n<li>Energia <code>energy</code> e limpeza <code>clean</code> devem ser iniciados no m\u00e1ximo.</li>\n<li>Idade <code>age</code> inicia em zero e aumenta a cada turno.</li>\n<li>Vivo <code>alive</code> inicia como <code>true</code> porque o bichinho inicia vivo.</li>\n</ul>\n</li>\n<li>Os m\u00e9todos <code>set</code> alteram os valores dentro dos limites de 0 at\u00e9 o m\u00e1ximo permitido e se o valor em algum momento for 0, muda o valor de vivo para false.</li>\n</ul>\n</li>\n<li>Classe <code>Game</code><ul>\n<li>\u00c9 respons\u00e1vel por armazenar o bichinho.</li>\n<li>\u00c9 onde est\u00e3o localizadas as l\u00f3gicas sobre as a\u00e7\u00f5es de brincar <code>play</code>, dar banho <code>shower</code> e dormir <code>sleep</code>.</li>\n<li>Cada opera\u00e7\u00e3o causa aumento e redu\u00e7\u00f5es nos atributos utilizando-se os m\u00e9todos <code>set</code> e <code>get</code> do <code>Tamagotchi</code>.</li>\n<li>Antes de qualquer a\u00e7\u00e3o, \u00e9 necess\u00e1rio verificar se o bicho est\u00e1 vivo. Pois brincar com bichos mortos n\u00e3o \u00e9 recomendado.</li>\n</ul>\n</li>\n</ul>\n<h2>Guide</h2>\n<p><img alt=\"diagrama\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/tamagotchi/diagrama.png\" /></p>\n<p><a href=\"https://youtu.be/VRW3_JuNwkA?si=827by8nZURcc2AuM\"><img alt=\"youtube icon\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/tamagotchi/../youguide.png\" /></a></p>\n<hr />\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE inicio</span>\n<span class=\"c1\"># O comando &quot;$init energia limpeza&quot; recebe os valores do pet.</span>\n<span class=\"c1\"># O pet inicia com 0 de idade.</span>\n<span class=\"c1\"># Toda vez que $init \u00e9 chamado, um novo pet \u00e9 criado.</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">20</span><span class=\"w\"> </span><span class=\"m\">15</span>\n<span class=\"c1\"># O comando &quot;$show&quot; mostra os par\u00e2metros do Pet na seguinte ordem</span>\n<span class=\"c1\"># Energia/Max, Limpeza/Max, Idade</span>\n<span class=\"nv\">$show</span>\nE:20/20,<span class=\"w\"> </span>L:15/15,<span class=\"w\"> </span>I:0\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">10</span><span class=\"w\"> </span><span class=\"m\">50</span>\n<span class=\"nv\">$show</span>\nE:10/10,<span class=\"w\"> </span>L:50/50,<span class=\"w\"> </span>I:0\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<hr />\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE play - Brincar </span>\n<span class=\"c1\"># O comando &quot;$play&quot; altera em -2 energia, -3 limpeza, +1 idade.</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">20</span><span class=\"w\"> </span><span class=\"m\">15</span>\n<span class=\"nv\">$play</span>\n<span class=\"nv\">$show</span>\nE:18/20,<span class=\"w\"> </span>L:12/15,<span class=\"w\"> </span>I:1\n<span class=\"nv\">$play</span>\n<span class=\"nv\">$play</span>\n<span class=\"nv\">$show</span>\nE:14/20,<span class=\"w\"> </span>L:6/15,<span class=\"w\"> </span>I:3\n\n<span class=\"c1\">#TEST_CASE dormir</span>\n<span class=\"c1\"># O Comando &quot;$sleep&quot; aumenta energia at\u00e9 o m\u00e1ximo e idade aumenta do n\u00famero de turnos que o pet dormiu.</span>\n<span class=\"nv\">$sleep</span>\n<span class=\"nv\">$show</span>\nE:20/20,<span class=\"w\"> </span>L:6/15,<span class=\"w\"> </span>I:9\n\n<span class=\"c1\">#TEST_CASE tomar banho</span>\n<span class=\"c1\"># O comando &quot;$shower&quot; alteram em -3 energia, MAX na limpeza, +2 na idade.</span>\n<span class=\"nv\">$shower</span>\n<span class=\"nv\">$show</span>\nE:17/20,<span class=\"w\"> </span>L:15/15,<span class=\"w\"> </span>I:11\n\n<span class=\"c1\">#TEST_CASE dormir sem sono</span>\n<span class=\"c1\"># Para dormir, precisa ter perdido pelo menos 5 unidades de energia</span>\n<span class=\"nv\">$sleep</span>\nfail:<span class=\"w\"> </span>nao<span class=\"w\"> </span>esta<span class=\"w\"> </span>com<span class=\"w\"> </span>sono\n\n<span class=\"c1\">#TEST_CASE morrer</span>\n<span class=\"c1\"># Se algum atributo atingir 0, o pet morre e n\u00e3o poder\u00e1 executar nenhuma a\u00e7\u00e3o</span>\n<span class=\"nv\">$play</span>\n<span class=\"nv\">$play</span>\n<span class=\"nv\">$play</span>\n<span class=\"nv\">$play</span>\n<span class=\"nv\">$show</span>\nE:9/20,<span class=\"w\"> </span>L:3/15,<span class=\"w\"> </span>I:15\n<span class=\"nv\">$play</span>\nfail:<span class=\"w\"> </span>pet<span class=\"w\"> </span>morreu<span class=\"w\"> </span>de<span class=\"w\"> </span>sujeira\n<span class=\"nv\">$show</span>\nE:7/20,<span class=\"w\"> </span>L:0/15,<span class=\"w\"> </span>I:16\n<span class=\"nv\">$play</span>\nfail:<span class=\"w\"> </span>pet<span class=\"w\"> </span>esta<span class=\"w\"> </span>morto\n<span class=\"nv\">$shower</span>\nfail:<span class=\"w\"> </span>pet<span class=\"w\"> </span>esta<span class=\"w\"> </span>morto\n<span class=\"nv\">$sleep</span>\nfail:<span class=\"w\"> </span>pet<span class=\"w\"> </span>esta<span class=\"w\"> </span>morto\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<hr />\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE fraqueza</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">10</span>\n<span class=\"nv\">$play</span>\n<span class=\"nv\">$play</span>\n<span class=\"nv\">$play</span>\nfail:<span class=\"w\"> </span>pet<span class=\"w\"> </span>morreu<span class=\"w\"> </span>de<span class=\"w\"> </span>fraqueza\n\n<span class=\"c1\">#TEST_CASE morto de fraqueza</span>\n<span class=\"nv\">$play</span>\nfail:<span class=\"w\"> </span>pet<span class=\"w\"> </span>esta<span class=\"w\"> </span>morto\n<span class=\"nv\">$show</span>\nE:0/5,<span class=\"w\"> </span>L:1/10,<span class=\"w\"> </span>I:3\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/tamagotchi/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/tamagotchi/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/tamagotchi/.cache/draft/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT inicio\ninit 20 15\nshow\ninit 10 50\nshow\nend\n======== EXPECT\n$init 20 15\n$show\nE:20/20, L:15/15, I:0\n$init 10 50\n$show\nE:10/10, L:50/50, I:0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT play - Brincar \ninit 20 15\nplay\nshow\nplay\nplay\nshow\nend\n======== EXPECT\n$init 20 15\n$play\n$show\nE:18/20, L:12/15, I:1\n$play\n$play\n$show\nE:14/20, L:6/15, I:3\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dormir\ninit 20 15\nplay\nshow\nplay\nplay\nshow\nsleep\nshow\nend\n======== EXPECT\n$init 20 15\n$play\n$show\nE:18/20, L:12/15, I:1\n$play\n$play\n$show\nE:14/20, L:6/15, I:3\n$sleep\n$show\nE:20/20, L:6/15, I:9\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT tomar banho\ninit 20 15\nplay\nshow\nplay\nplay\nshow\nsleep\nshow\nshower\nshow\nend\n======== EXPECT\n$init 20 15\n$play\n$show\nE:18/20, L:12/15, I:1\n$play\n$play\n$show\nE:14/20, L:6/15, I:3\n$sleep\n$show\nE:20/20, L:6/15, I:9\n$shower\n$show\nE:17/20, L:15/15, I:11\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dormir sem sono\ninit 20 15\nplay\nshow\nplay\nplay\nshow\nsleep\nshow\nshower\nshow\nsleep\nend\n======== EXPECT\n$init 20 15\n$play\n$show\nE:18/20, L:12/15, I:1\n$play\n$play\n$show\nE:14/20, L:6/15, I:3\n$sleep\n$show\nE:20/20, L:6/15, I:9\n$shower\n$show\nE:17/20, L:15/15, I:11\n$sleep\nfail: nao esta com sono\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT morrer\ninit 20 15\nplay\nshow\nplay\nplay\nshow\nsleep\nshow\nshower\nshow\nsleep\nplay\nplay\nplay\nplay\nshow\nplay\nshow\nplay\nshower\nsleep\nend\n======== EXPECT\n$init 20 15\n$play\n$show\nE:18/20, L:12/15, I:1\n$play\n$play\n$show\nE:14/20, L:6/15, I:3\n$sleep\n$show\nE:20/20, L:6/15, I:9\n$shower\n$show\nE:17/20, L:15/15, I:11\n$sleep\nfail: nao esta com sono\n$play\n$play\n$play\n$play\n$show\nE:9/20, L:3/15, I:15\n$play\nfail: pet morreu de sujeira\n$show\nE:7/20, L:0/15, I:16\n$play\nfail: pet esta morto\n$shower\nfail: pet esta morto\n$sleep\nfail: pet esta morto\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT fraqueza\ninit 5 10\nplay\nplay\nplay\nend\n======== EXPECT\n$init 5 10\n$play\n$play\n$play\nfail: pet morreu de fraqueza\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT morto de fraqueza\ninit 5 10\nplay\nplay\nplay\nplay\nshow\nend\n======== EXPECT\n$init 5 10\n$play\n$play\n$play\nfail: pet morreu de fraqueza\n$play\nfail: pet esta morto\n$show\nE:0/5, L:1/10, I:3\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\nfunction main() {\n    // CRIE SEU JOGO AQUI COM UM PET ZERADO\n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        } \n        // else if (cmd == \"init\") {\n        //     // CRIE UM NOVO JOGO COM UM NOVO PET\n        //     const energy = parseInt(par[1]);\n        //     const clean = parseInt(par[2]);\n        // } \n        // else if (cmd == \"play\") { \n        // } \n        // else if (cmd == \"shower\") { \n        // } \n        // else if (cmd == \"sleep\") { \n        // } \n        // else if (cmd == \"show\") { \n        // } \n        else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\n\npublic class Shell {\n    public static void main(String[] a) {\n        \n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            // else if (cmd.equals(\"init\")) {\n            //     // CRIE UM NOVO JOGO COM UM NOVO PET\n            //     var energy = Integer.parseInt(par[1]);\n            //     var clean = Integer.parseInt(par[2]);\n            // }\n            // else if (cmd.equals(\"show\")) { \n            // }\n            // else if (cmd.equals(\"play\")) { \n            // }\n            // else if (cmd.equals(\"shower\")) { \n            // }\n            // else if (cmd.equals(\"sleep\")) { \n            // }\n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <sstream>\n#include <string>\nusing namespace std;\n\nint main() {\n\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } \n        // else if (cmd == \"init\") {\n        //     // CRIE UM NOVO JOGO COM UM NOVO PET\n        //     int energy, clean;\n        //     ss >> energy >> clean;\n        // }\n        // else if (cmd == \"show\") { \n        // } \n        // else if (cmd == \"play\") { \n        // } \n        // else if (cmd == \"shower\") { \n        // } \n        // else if (cmd == \"eat\") { \n        // } \n        // else if (cmd == \"sleep\") { \n        // } \n        else {\n            cout << \"fail: comando invalido\" << endl;\n        }\n    }\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
