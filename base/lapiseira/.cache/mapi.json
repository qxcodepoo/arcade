{
    "title": "@lapiseira: Lapiseira com m\u00faltiplos grafites",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@lapiseira: Lapiseira com m\u00faltiplos grafites</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Lapiseira com m\u00faltiplos grafites</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/lapiseira/cover.jpg\" /></p>\n<p>Fa\u00e7a o modelo de uma lapiseira que pode conter v\u00e1rios.</p>\n<h2>Intro</h2>\n<ul>\n<li>Iniciar lapiseira<ul>\n<li>Inicia uma lapiseira de determinado calibre sem grafite.</li>\n<li>Lapiseiras possuem um bico e um tambor.</li>\n<li>O bico guarda o grafite que est\u00e1 em uso.</li>\n<li>O tambor guarda os grafites reservas.</li>\n</ul>\n</li>\n<li>Inserir grafite<ul>\n<li>Insere um grafite passando<ul>\n<li>o calibre: float.</li>\n<li>a dureza: string.</li>\n<li>o tamanho em mm: int.</li>\n</ul>\n</li>\n<li>N\u00e3o deve aceitar um grafite de calibre n\u00e3o compat\u00edvel.</li>\n<li>O grafite \u00e9 colocado como o \u00daLTIMO grafite do tambor.</li>\n</ul>\n</li>\n<li>Puxar grafite<ul>\n<li>Puxa o grafite do tambor para o bico.</li>\n<li>Se j\u00e1 tiver um grafite no bico, esse precisa ser removido primeiro.</li>\n</ul>\n</li>\n<li>Remover grafite<ul>\n<li>Retira o grafite do bico.</li>\n</ul>\n</li>\n<li>Escrever folha<ul>\n<li>N\u00e3o \u00e9 poss\u00edvel escrever se n\u00e3o h\u00e1 grafite no bico.</li>\n<li>Quanto mais macio o grafite, mais rapidamente ele se acaba. Para simplificar, use a seguinte regra:<ul>\n<li>Grafite HB: 1mm por folha.</li>\n<li>Grafite 2B: 2mm por folha.</li>\n<li>Grafite 4B: 4mm por folha.</li>\n<li>Grafite 6B: 6mm por folha.</li>\n</ul>\n</li>\n<li>O \u00faltimo cent\u00edmetro de um grafite n\u00e3o pode ser aproveitado, quando o grafite estiver com 10mm, n\u00e3o \u00e9 mais poss\u00edvel escrever e o grafite deve ser retirado.</li>\n<li>Se n\u00e3o houver grafite suficiente para terminar a folha, avise que o texto ficou incompleto.</li>\n</ul>\n</li>\n</ul>\n<h2>Guide</h2>\n<p><img alt=\"diagrama\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/lapiseira/diagrama.png\" /></p>\n<p><a href=\"https://youtu.be/82aFfjuITm8?si=dbFx8fWPH4CBL15d\"><img alt=\"youtube icon\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/yousolver.png\" /></a></p>\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE inserindo grafites</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">0</span>.5\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.5,<span class=\"w\"> </span>bico:<span class=\"w\"> </span><span class=\"o\">[]</span>,<span class=\"w\"> </span>tambor:<span class=\"w\"> </span>&lt;&gt;\n<span class=\"c1\">#TEST_CASE calibre errado</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">0</span>.7<span class=\"w\"> </span>2B<span class=\"w\"> </span><span class=\"m\">50</span>\nfail:<span class=\"w\"> </span>calibre<span class=\"w\"> </span>incompat\u00edvel\n<span class=\"c1\">#TEST_CASE calibre certo</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">0</span>.5<span class=\"w\"> </span>2B<span class=\"w\"> </span><span class=\"m\">50</span>\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.5,<span class=\"w\"> </span>bico:<span class=\"w\"> </span><span class=\"o\">[]</span>,<span class=\"w\"> </span>tambor:<span class=\"w\"> </span>&lt;<span class=\"o\">[</span><span class=\"m\">0</span>.5:2B:50<span class=\"o\">]</span>&gt;\n<span class=\"c1\">#TEST_CASE mais de um grafite</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">0</span>.5<span class=\"w\"> </span>2B<span class=\"w\"> </span><span class=\"m\">30</span>\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.5,<span class=\"w\"> </span>bico:<span class=\"w\"> </span><span class=\"o\">[]</span>,<span class=\"w\"> </span>tambor:<span class=\"w\"> </span>&lt;<span class=\"o\">[</span><span class=\"m\">0</span>.5:2B:50<span class=\"o\">][</span><span class=\"m\">0</span>.5:2B:30<span class=\"o\">]</span>&gt;\n<span class=\"c1\">#TEST_CASE puxando grafite</span>\n<span class=\"nv\">$pull</span>\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.5,<span class=\"w\"> </span>bico:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>.5:2B:50<span class=\"o\">]</span>,<span class=\"w\"> </span>tambor:<span class=\"w\"> </span>&lt;<span class=\"o\">[</span><span class=\"m\">0</span>.5:2B:30<span class=\"o\">]</span>&gt;\n<span class=\"c1\">#TEST_CASE puxando ocupado</span>\n<span class=\"nv\">$pull</span>\nfail:<span class=\"w\"> </span>ja<span class=\"w\"> </span>existe<span class=\"w\"> </span>grafite<span class=\"w\"> </span>no<span class=\"w\"> </span>bico\n<span class=\"c1\">#TEST_CASE removendo do bico</span>\n<span class=\"nv\">$remove</span>\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.5,<span class=\"w\"> </span>bico:<span class=\"w\"> </span><span class=\"o\">[]</span>,<span class=\"w\"> </span>tambor:<span class=\"w\"> </span>&lt;<span class=\"o\">[</span><span class=\"m\">0</span>.5:2B:30<span class=\"o\">]</span>&gt;\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<hr />\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE escrevendo </span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">0</span>.9\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">0</span>.9<span class=\"w\"> </span>4B<span class=\"w\"> </span><span class=\"m\">14</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">0</span>.9<span class=\"w\"> </span>4B<span class=\"w\"> </span><span class=\"m\">16</span>\n\n<span class=\"c1\">#TEST_CASE sem grafite no bico</span>\n<span class=\"nv\">$write</span>\nfail:<span class=\"w\"> </span>nao<span class=\"w\"> </span>existe<span class=\"w\"> </span>grafite<span class=\"w\"> </span>no<span class=\"w\"> </span>bico\n\n<span class=\"c1\">#TEST_CASE puxando grafite</span>\n<span class=\"nv\">$pull</span>\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.9,<span class=\"w\"> </span>bico:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>.9:4B:14<span class=\"o\">]</span>,<span class=\"w\"> </span>tambor:<span class=\"w\"> </span>&lt;<span class=\"o\">[</span><span class=\"m\">0</span>.9:4B:16<span class=\"o\">]</span>&gt;\n\n<span class=\"c1\">#TEST_CASE gastando grafite</span>\n<span class=\"nv\">$write</span>\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.9,<span class=\"w\"> </span>bico:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>.9:4B:10<span class=\"o\">]</span>,<span class=\"w\"> </span>tambor:<span class=\"w\"> </span>&lt;<span class=\"o\">[</span><span class=\"m\">0</span>.9:4B:16<span class=\"o\">]</span>&gt;\n\n<span class=\"c1\">#TEST_CASE puxando novo</span>\n<span class=\"nv\">$remove</span>\n<span class=\"nv\">$pull</span>\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.9,<span class=\"w\"> </span>bico:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>.9:4B:16<span class=\"o\">]</span>,<span class=\"w\"> </span>tambor:<span class=\"w\"> </span>&lt;&gt;\n<span class=\"nv\">$write</span>\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.9,<span class=\"w\"> </span>bico:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>.9:4B:12<span class=\"o\">]</span>,<span class=\"w\"> </span>tambor:<span class=\"w\"> </span>&lt;&gt;\n\n<span class=\"c1\">#TEST_CASE folha incompleta</span>\n<span class=\"nv\">$write</span>\nfail:<span class=\"w\"> </span>folha<span class=\"w\"> </span>incompleta\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.9,<span class=\"w\"> </span>bico:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>.9:4B:10<span class=\"o\">]</span>,<span class=\"w\"> </span>tambor:<span class=\"w\"> </span>&lt;&gt;\n\n<span class=\"c1\">#TEST_CASE tamanho insuficiente</span>\n<span class=\"nv\">$write</span>\nfail:<span class=\"w\"> </span>tamanho<span class=\"w\"> </span>insuficiente\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/lapiseira/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/lapiseira/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/lapiseira/.cache/draft/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT inserindo grafites\ninit 0.5\nshow\nend\n======== EXPECT\n$init 0.5\n$show\ncalibre: 0.5, bico: [], tambor: <>\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT calibre errado\ninit 0.5\nshow\ninsert 0.7 2B 50\nend\n======== EXPECT\n$init 0.5\n$show\ncalibre: 0.5, bico: [], tambor: <>\n$insert 0.7 2B 50\nfail: calibre incompat\u00edvel\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT calibre certo\ninit 0.5\nshow\ninsert 0.7 2B 50\ninsert 0.5 2B 50\nshow\nend\n======== EXPECT\n$init 0.5\n$show\ncalibre: 0.5, bico: [], tambor: <>\n$insert 0.7 2B 50\nfail: calibre incompat\u00edvel\n$insert 0.5 2B 50\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50]>\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT mais de um grafite\ninit 0.5\nshow\ninsert 0.7 2B 50\ninsert 0.5 2B 50\nshow\ninsert 0.5 2B 30\nshow\nend\n======== EXPECT\n$init 0.5\n$show\ncalibre: 0.5, bico: [], tambor: <>\n$insert 0.7 2B 50\nfail: calibre incompat\u00edvel\n$insert 0.5 2B 50\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50]>\n$insert 0.5 2B 30\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50][0.5:2B:30]>\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT puxando grafite\ninit 0.5\nshow\ninsert 0.7 2B 50\ninsert 0.5 2B 50\nshow\ninsert 0.5 2B 30\nshow\npull\nshow\nend\n======== EXPECT\n$init 0.5\n$show\ncalibre: 0.5, bico: [], tambor: <>\n$insert 0.7 2B 50\nfail: calibre incompat\u00edvel\n$insert 0.5 2B 50\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50]>\n$insert 0.5 2B 30\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50][0.5:2B:30]>\n$pull\n$show\ncalibre: 0.5, bico: [0.5:2B:50], tambor: <[0.5:2B:30]>\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT puxando ocupado\ninit 0.5\nshow\ninsert 0.7 2B 50\ninsert 0.5 2B 50\nshow\ninsert 0.5 2B 30\nshow\npull\nshow\npull\nend\n======== EXPECT\n$init 0.5\n$show\ncalibre: 0.5, bico: [], tambor: <>\n$insert 0.7 2B 50\nfail: calibre incompat\u00edvel\n$insert 0.5 2B 50\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50]>\n$insert 0.5 2B 30\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50][0.5:2B:30]>\n$pull\n$show\ncalibre: 0.5, bico: [0.5:2B:50], tambor: <[0.5:2B:30]>\n$pull\nfail: ja existe grafite no bico\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT removendo do bico\ninit 0.5\nshow\ninsert 0.7 2B 50\ninsert 0.5 2B 50\nshow\ninsert 0.5 2B 30\nshow\npull\nshow\npull\nremove\nshow\nend\n======== EXPECT\n$init 0.5\n$show\ncalibre: 0.5, bico: [], tambor: <>\n$insert 0.7 2B 50\nfail: calibre incompat\u00edvel\n$insert 0.5 2B 50\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50]>\n$insert 0.5 2B 30\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:50][0.5:2B:30]>\n$pull\n$show\ncalibre: 0.5, bico: [0.5:2B:50], tambor: <[0.5:2B:30]>\n$pull\nfail: ja existe grafite no bico\n$remove\n$show\ncalibre: 0.5, bico: [], tambor: <[0.5:2B:30]>\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT escrevendo \ninit 0.9\ninsert 0.9 4B 14\ninsert 0.9 4B 16\nend\n======== EXPECT\n$init 0.9\n$insert 0.9 4B 14\n$insert 0.9 4B 16\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sem grafite no bico\ninit 0.9\ninsert 0.9 4B 14\ninsert 0.9 4B 16\nwrite\nend\n======== EXPECT\n$init 0.9\n$insert 0.9 4B 14\n$insert 0.9 4B 16\n$write\nfail: nao existe grafite no bico\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT puxando grafite\ninit 0.9\ninsert 0.9 4B 14\ninsert 0.9 4B 16\nwrite\npull\nshow\nend\n======== EXPECT\n$init 0.9\n$insert 0.9 4B 14\n$insert 0.9 4B 16\n$write\nfail: nao existe grafite no bico\n$pull\n$show\ncalibre: 0.9, bico: [0.9:4B:14], tambor: <[0.9:4B:16]>\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT gastando grafite\ninit 0.9\ninsert 0.9 4B 14\ninsert 0.9 4B 16\nwrite\npull\nshow\nwrite\nshow\nend\n======== EXPECT\n$init 0.9\n$insert 0.9 4B 14\n$insert 0.9 4B 16\n$write\nfail: nao existe grafite no bico\n$pull\n$show\ncalibre: 0.9, bico: [0.9:4B:14], tambor: <[0.9:4B:16]>\n$write\n$show\ncalibre: 0.9, bico: [0.9:4B:10], tambor: <[0.9:4B:16]>\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT puxando novo\ninit 0.9\ninsert 0.9 4B 14\ninsert 0.9 4B 16\nwrite\npull\nshow\nwrite\nshow\nremove\npull\nshow\nwrite\nshow\nend\n======== EXPECT\n$init 0.9\n$insert 0.9 4B 14\n$insert 0.9 4B 16\n$write\nfail: nao existe grafite no bico\n$pull\n$show\ncalibre: 0.9, bico: [0.9:4B:14], tambor: <[0.9:4B:16]>\n$write\n$show\ncalibre: 0.9, bico: [0.9:4B:10], tambor: <[0.9:4B:16]>\n$remove\n$pull\n$show\ncalibre: 0.9, bico: [0.9:4B:16], tambor: <>\n$write\n$show\ncalibre: 0.9, bico: [0.9:4B:12], tambor: <>\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT folha incompleta\ninit 0.9\ninsert 0.9 4B 14\ninsert 0.9 4B 16\nwrite\npull\nshow\nwrite\nshow\nremove\npull\nshow\nwrite\nshow\nwrite\nshow\nend\n======== EXPECT\n$init 0.9\n$insert 0.9 4B 14\n$insert 0.9 4B 16\n$write\nfail: nao existe grafite no bico\n$pull\n$show\ncalibre: 0.9, bico: [0.9:4B:14], tambor: <[0.9:4B:16]>\n$write\n$show\ncalibre: 0.9, bico: [0.9:4B:10], tambor: <[0.9:4B:16]>\n$remove\n$pull\n$show\ncalibre: 0.9, bico: [0.9:4B:16], tambor: <>\n$write\n$show\ncalibre: 0.9, bico: [0.9:4B:12], tambor: <>\n$write\nfail: folha incompleta\n$show\ncalibre: 0.9, bico: [0.9:4B:10], tambor: <>\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT tamanho insuficiente\ninit 0.9\ninsert 0.9 4B 14\ninsert 0.9 4B 16\nwrite\npull\nshow\nwrite\nshow\nremove\npull\nshow\nwrite\nshow\nwrite\nshow\nwrite\nend\n======== EXPECT\n$init 0.9\n$insert 0.9 4B 14\n$insert 0.9 4B 16\n$write\nfail: nao existe grafite no bico\n$pull\n$show\ncalibre: 0.9, bico: [0.9:4B:14], tambor: <[0.9:4B:16]>\n$write\n$show\ncalibre: 0.9, bico: [0.9:4B:10], tambor: <[0.9:4B:16]>\n$remove\n$pull\n$show\ncalibre: 0.9, bico: [0.9:4B:16], tambor: <>\n$write\n$show\ncalibre: 0.9, bico: [0.9:4B:12], tambor: <>\n$write\nfail: folha incompleta\n$show\ncalibre: 0.9, bico: [0.9:4B:10], tambor: <>\n$write\nfail: tamanho insuficiente\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\nfunction main() {\n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd === \"end\") {\n            break;\n        }\n        else if (cmd === \"show\") { \n        }\n        else if (cmd === \"init\") { \n            // const thickness = parseFloat(par[1]);\n        }\n        else if (cmd === \"insert\") { \n            // const thickness = parseFloat(par[1]);\n            // const hardness = par[2];\n            // const size = parseInt(par[3]);\n        }\n        else if (cmd === \"remove\") { \n        }\n        else if (cmd === \"write\") { \n        }\n        else if (cmd === \"pull\") { \n        }\n        else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.text.DecimalFormat;\nimport java.util.Scanner;\nimport java.util.ArrayList;\npublic class Shell {\n    public static void main(String[] _args) {\n\n        while(true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"show\")) { \n            } \n            else if (cmd.equals(\"init\")) { \n                // var thickness = Double.parseDouble(par[1]);\n            } \n            else if (cmd.equals(\"insert\")) { \n                // var thickness = Double.parseDouble(par[1]);\n                // var hardness = par[2];\n                // var size = Integer.parseInt(par[3]);\n            } \n            else if (cmd.equals(\"remove\")) { \n            } \n            else if (cmd.equals(\"show\")) { \n            } \n            else if (cmd.equals(\"write\")) { \n            } \n            else if (cmd.equals(\"pull\")) { \n            } \n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <list>\n#include <sstream>\n#include <memory>\nusing namespace std;\n\n// Fun\u00e7\u00e3o auxiliar para mapear e juntar elementos de um container\ntemplate <typename CONTAINER, typename FUNC>\nauto map_join(const CONTAINER& c, FUNC f, const string& sep = \", \") {\n    stringstream ss;\n    for (auto it = c.begin(); it != c.end(); ++it) {\n        ss << (it != c.begin() ? sep : \"\");\n        ss << f(*it);\n    }\n    return ss.str();\n}\n\nint main() {\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;  \n        }\n        else if (cmd == \"show\") { \n        } \n        else if (cmd == \"init\") { \n            // float calibre;\n            // ss >> calibre;\n        } \n        else if (cmd == \"insert\") { \n            // float calibre;\n            // string dureza;\n            // int tamanho;\n            // ss >> calibre >> dureza >> tamanho;\n        } \n        else if (cmd == \"remove\") { \n        } \n        else if (cmd == \"pull\") { \n        } \n        else if (cmd == \"write\") { \n        } \n        else {\n            cout << \"fail: comando invalido\\n\";\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
