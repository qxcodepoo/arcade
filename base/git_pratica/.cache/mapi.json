{
    "title": "@git_pratica: Pr\u00e1tica git",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@git_pratica: Pr\u00e1tica git</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Pr\u00e1tica git</h1>\n<p>Essa pr\u00e1tica tem 10 pontos. Pontue a atividade ao final de acordo com o que foi realizado.</p>\n<p>Fa\u00e7a um relat\u00f3rio de um par\u00e1grafo explicando o que foi feito, o que foi aprendido e as dificuldades encontradas.</p>\n<h2>Manipulando localmente (1 ponto)</h2>\n<ul>\n<li>Criar um nova pasta: <code>mkdir nome-da-pasta</code></li>\n<li>Entrar na pasta criada: <code>cd nome-da-pasta</code></li>\n<li>Criar um reposit\u00f3rio vazio: <code>git init</code></li>\n<li>Abrir o vscode na pasta criada: <code>code .</code></li>\n<li>Saber o estado do reposit\u00f3rio: <code>git status</code></li>\n<li>Criar um arquivo <code>code nome-do-arquivo.extens\u00e3o</code></li>\n<li>Adicione conte\u00fado ao arquivo e salvar<ul>\n<li>Coloque o vscode para salvar automaticamente na op\u00e7\u00e3o auto save</li>\n<li>Control , e escolher auto save (after delay)</li>\n</ul>\n</li>\n</ul>\n<h2>Primeiro fluxo de trabalho (1 ponto)</h2>\n<ul>\n<li>Adicionar o arquivo ao stage: <code>git add nome-do-arquivo.extens\u00e3o</code></li>\n<li>Fazer um commit: <code>git commit -m \"Mensagem do commit\"</code></li>\n<li>Se o commit der erro, ele pode pedir pra identificar o usu\u00e1rio:<ul>\n<li><code>git config --global user.name \"Seu Nome\"</code></li>\n<li><code>git config --global user.email \"email\"</code></li>\n</ul>\n</li>\n<li>Fa\u00e7a tamb\u00e9m o add e o commit pela interface do vscode</li>\n</ul>\n<h2>Desfazendo mudan\u00e7as (1 ponto)</h2>\n<ul>\n<li>Fazer uma mudan\u00e7a no arquivo e voltar para vers\u00e3o do commit<ul>\n<li><code>git restore nome-do-arquivo.extens\u00e3o</code></li>\n</ul>\n</li>\n<li>Fa\u00e7a o restore tamb\u00e9m pela interface do vscode<ul>\n<li>Clicando no bot\u00e3o <code>Discard Changes</code> no vscode</li>\n</ul>\n</li>\n</ul>\n<h2>Olhando o hist\u00f3rico (1 ponto)</h2>\n<ul>\n<li>Fazer uma altera\u00e7\u00e3o e salvar via vscode</li>\n<li>Ver hist\u00f3rico de commits: <code>git log</code></li>\n<li>Saber onde ficam as vers\u00f5es dos arquivos alterados pelo vscode</li>\n<li>Conseguir pular o reposit\u00f3rio para uma vers\u00e3o anterior<ul>\n<li><code>git checkout id-do-commit</code></li>\n</ul>\n</li>\n<li>Voltar para a vers\u00e3o mais recente<ul>\n<li><code>git checkout main</code></li>\n</ul>\n</li>\n</ul>\n<h2>Trabalhando remotamente (1 ponto)</h2>\n<ul>\n<li>Criar um reposit\u00f3rio novo no github, inicializando ele com um readme.md</li>\n<li>Clicar em criar codespace</li>\n<li>No codespace, alterar algo, e fazer o add, commit, push</li>\n<li>Verificar mudan\u00e7as no github</li>\n<li>Alterar algo no reposit\u00f3rio via interface web do github</li>\n<li>Puxar as modifica\u00e7\u00f5es para o codespace utilizando <code>git pull</code></li>\n</ul>\n<h2>Criando um conflito (2 pontos)</h2>\n<ul>\n<li>Alterar um arquivo pela interface web do github e fazer commit</li>\n<li>Alterar o mesmo arquivo no codespace</li>\n<li>Tentar fazer o push no codespace</li>\n<li>Tentar fazer o pull no codespace</li>\n<li>Definir que a estrat\u00e9gia padr\u00e3o para conflitos \u00e9 fazer o merge<ul>\n<li><code>git config --global pull.rebase false</code></li>\n</ul>\n</li>\n<li>Fazer o pull novamente</li>\n<li>Usar o git status para ver os arquivos em conflito</li>\n<li>Abrir cada um dos arquivos marcados como conflito (!)</li>\n<li>Resolver o conflito, removendo as marca\u00e7\u00f5es do git</li>\n<li>Fazer o add, commit e push</li>\n<li>Verificar o resultado no github</li>\n</ul>\n<h2>Usando m\u00e1quina local (3 pontos)</h2>\n<ul>\n<li>Instalar o git, o vscode e as ferramentas de compila\u00e7\u00e3o na sua m\u00e1quina local.</li>\n<li>Configurar acesso ao git via chaves ssh ou token de acesso pessoal.</li>\n<li>Conseguir clonar na m\u00e1quina local o reposit\u00f3rio do github.</li>\n<li>Fazer algum commit, push e pull na m\u00e1quina local e enviar para o github.</li>\n</ul>\n<div class=\"language-sh highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n<span class=\"nv\">1</span>\n<span class=\"o\">========</span>\n<span class=\"m\">1</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt;&lt;\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n1\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
