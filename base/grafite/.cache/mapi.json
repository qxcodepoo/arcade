{
    "title": "@grafite: Porta minas de um grafite s\u00f3",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@grafite: Porta minas de um grafite s\u00f3</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Porta minas de um grafite s\u00f3</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/grafite/cover.jpg\" /></p>\n<p>Fa\u00e7a o modelo de uma lapiseira que pode conter um \u00fanico grafite.</p>\n<p><a href=\"https://youtu.be/LvZODN2rL6s\"><img alt=\"explica\u00e7\u00e3o\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/grafite/../../wiki/images/explicacao.png\" /></a></p>\n<h2>Intro</h2>\n<p>O objetivo dessa atividade \u00e9 implementar uma lapiseira que permite inserir, remover grafite e escrever em uma folha, considerando a dureza e tamanho do grafite.</p>\n<ul>\n<li>\n<p>Descri\u00e7\u00e3o</p>\n<ul>\n<li>A lapiseira \u00e9 capaz de iniciar, inserir e remover grafite, al\u00e9m de escrever em uma folha.</li>\n<li>Para inserir um grafite, \u00e9 necess\u00e1rio especificar o calibre (float), a dureza (string) e o tamanho em mm (int).</li>\n<li>A remo\u00e7\u00e3o do grafite s\u00f3 \u00e9 poss\u00edvel se houver algum na lapiseira.</li>\n<li>A escrita na folha s\u00f3 \u00e9 poss\u00edvel se houver grafite suficiente e se o tamanho do grafite for superior a 10mm.</li>\n<li>A quantidade de grafite gasto varia de acordo com a dureza do grafite. Quanto mais macio, mais ele se desgasta.</li>\n<li>Quando o tamanho do grafite atinge 10mm, n\u00e3o \u00e9 mais poss\u00edvel escrever.</li>\n<li>Se n\u00e3o houver grafite suficiente para terminar a escrita na folha, \u00e9 emitido um aviso de texto incompleto.</li>\n</ul>\n</li>\n<li>\n<p>Responsabilidades</p>\n<ul>\n<li>A classe Grafite <code>Lead</code> \u00e9 respons\u00e1vel por armazenar as informa\u00e7\u00f5es do grafite.<ul>\n<li><code>thickness</code> \u00e9 a espessura e ter\u00e1 valores como 0.3, 0.5, 0.7.</li>\n<li><code>hardness</code> \u00e9 a dureza e poder\u00e1 ter os seguintes valores: <code>HB, 2B, 4B, 6B</code>.</li>\n<li>O m\u00e9todo <code>usagePerSheet</code> retorna a quantidade de grafite gasto por folha.<ul>\n<li>Um grafite <code>HB</code> gasta <code>1mm</code> por folha.</li>\n<li>Um grafite <code>2B</code> gasta <code>2mm</code> por folha.</li>\n<li>Um grafite <code>4B</code> gasta <code>4mm</code> por folha.</li>\n<li>Um grafite <code>6B</code> gasta <code>6mm</code> por folha.</li>\n</ul>\n</li>\n<li><code>size</code> representa o tamanho do grafite em <code>mil\u00edmetros</code>.</li>\n</ul>\n</li>\n<li>A classe <code>Pencil</code> \u00e9 respons\u00e1vel por gerenciar as opera\u00e7\u00f5es de inser\u00e7\u00e3o, remo\u00e7\u00e3o de grafite e escrita na folha.<ul>\n<li>Ela referencia um \u00fanico objeto lapiseira como atributo.</li>\n<li>E tamb\u00e9m possui um indicador de espessura <code>thickness</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Comandos<ul>\n<li>Todos os comandos seguem o modelo <code>$comando arg1 arg2 ...</code>.</li>\n<li><code>$iniciar calibre</code> - Inicializa a lapiseira com um determinado calibre.</li>\n<li><code>$inserir calibre dureza tamanho</code> - Insere um grafite com o calibre, dureza e tamanho especificados.<ul>\n<li>erros:<ul>\n<li><code>fail: calibre incompativel</code> - Se o calibre do grafite for diferente do calibre da lapiseira.</li>\n<li><code>fail: ja existe grafite</code> - Se j\u00e1 houver um grafite na lapiseira.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>$remover</code> - Remove o grafite da lapiseira, se houver.<ul>\n<li>erros:<ul>\n<li><code>fail: nao existe grafite</code> - Se n\u00e3o houver grafite na lapiseira.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>$escrever</code> - Escreve na folha, considerando o grafite presente na lapiseira.<ul>\n<li>O grafite \u00e9 gasto de acordo com a dureza.</li>\n<li>erros:<ul>\n<li><code>fail: nao existe grafite</code> - Se n\u00e3o houver grafite na lapiseira.</li>\n<li><code>fail: tamanho insuficiente</code> - Se o tamanho do grafite for insuficiente para come\u00e7ar a escrita.</li>\n<li><code>fail: folha incompleta</code> - Se o grafite n\u00e3o for suficiente para terminar a escrita.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Guide</h2>\n<p><img alt=\"diagrama\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/grafite/diagrama.png\" /></p>\n<p><a href=\"https://youtu.be/DyhXHlM7Bv4?si=G05IiBLI15FrP6Bm\"><img alt=\"youtube icon\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/grafite/../youguide.png\" /></a></p>\n<ul>\n<li>\n<p>Parte 1: Inserir</p>\n<ul>\n<li>Crie a classe Grafite <code>Lead</code> com o atributo tamanho <code>size</code>.</li>\n<li>Crie a classe Lapiseira <code>Pencil</code> com o atributo ponta <code>tip</code> inicializado como <code>null</code>.</li>\n<li>Implemente o m\u00e9todo tem grafite <code>hasGrafite</code> que retorna <code>true</code> se houver grafite na lapiseira.</li>\n<li>Implemente o m\u00e9todo inserir <code>insert</code> que insere um grafite na lapiseira, se n\u00e3o houver grafite.</li>\n<li>Implemente o m\u00e9todo <code>toString</code> que mostra a lapiseira e o grafite presente.</li>\n</ul>\n</li>\n<li>\n<p>Parte 2: Remover Grafite</p>\n<ul>\n<li>Implemente o m\u00e9todo <code>remove</code> que retira o grafite da lapiseira, se houver.</li>\n<li>Verifique se o m\u00e9todo <code>remove</code> retorna o grafite removido ou <code>null</code> se n\u00e3o havia grafite.</li>\n</ul>\n</li>\n<li>\n<p>Parte 3: Escrever na Folha</p>\n<ul>\n<li>Implemente o m\u00e9todo <code>writePage</code> que escreve na folha.</li>\n<li>Implemente o m\u00e9todo <code>usagePerSheet</code> que retorna a quantidade de grafite gasto por folha.</li>\n<li>Verifique se a lapiseira consegue escrever na folha.</li>\n<li>Fa\u00e7a as verifica\u00e7\u00f5es antes de escrever na folha.</li>\n<li>Para ver se o grafite ser\u00e1 suficiente para escrever na folha, verifique qual o tamanho final que ele teria se fizesse a folha completa.<ul>\n<li>Se esse tamanho for menor que 10mm, ele deve gastar o que for poss\u00edvel e parar a folha pela metade.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE inserindo grafites</span>\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">0</span>.5\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.5,<span class=\"w\"> </span>grafite:<span class=\"w\"> </span>null\n\n<span class=\"c1\">#TEST_CASE incompativel</span>\n\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">0</span>.7<span class=\"w\"> </span>2B<span class=\"w\"> </span><span class=\"m\">50</span>\nfail:<span class=\"w\"> </span>calibre<span class=\"w\"> </span>incompativel\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">0</span>.5<span class=\"w\"> </span>2B<span class=\"w\"> </span><span class=\"m\">50</span>\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.5,<span class=\"w\"> </span>grafite:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>.5:2B:50<span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<hr />\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE inserindo</span>\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">0</span>.3\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">0</span>.3<span class=\"w\"> </span>2B<span class=\"w\"> </span><span class=\"m\">50</span>\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.3,<span class=\"w\"> </span>grafite:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>.3:2B:50<span class=\"o\">]</span>\n\n<span class=\"c1\">#TEST_CASE ja existe</span>\n\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">0</span>.3<span class=\"w\"> </span>4B<span class=\"w\"> </span><span class=\"m\">70</span>\nfail:<span class=\"w\"> </span>ja<span class=\"w\"> </span>existe<span class=\"w\"> </span>grafite\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.3,<span class=\"w\"> </span>grafite:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>.3:2B:50<span class=\"o\">]</span>\n\n<span class=\"c1\">#TEST_CASE removendo</span>\n\n<span class=\"nv\">$remove</span>\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.3,<span class=\"w\"> </span>grafite:<span class=\"w\"> </span>null\n\n<span class=\"c1\">#TEST_CASE reinserindo</span>\n\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">0</span>.3<span class=\"w\"> </span>4B<span class=\"w\"> </span><span class=\"m\">70</span>\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.3,<span class=\"w\"> </span>grafite:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>.3:4B:70<span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<hr />\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE sem grafite</span>\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">0</span>.9\n<span class=\"nv\">$write</span>\nfail:<span class=\"w\"> </span>nao<span class=\"w\"> </span>existe<span class=\"w\"> </span>grafite\n\n<span class=\"c1\">#TEST_CASE escrevendo 1</span>\n\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">0</span>.9<span class=\"w\"> </span>4B<span class=\"w\"> </span><span class=\"m\">14</span>\n<span class=\"nv\">$write</span>\n<span class=\"nv\">$write</span>\nfail:<span class=\"w\"> </span>tamanho<span class=\"w\"> </span>insuficiente\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.9,<span class=\"w\"> </span>grafite:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>.9:4B:10<span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<hr />\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE escrevendo 2</span>\n\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">0</span>.9\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">0</span>.9<span class=\"w\"> </span>4B<span class=\"w\"> </span><span class=\"m\">16</span>\n<span class=\"nv\">$write</span>\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.9,<span class=\"w\"> </span>grafite:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>.9:4B:12<span class=\"o\">]</span>\n\n<span class=\"c1\">#TEST_CASE escrevendo 3</span>\n\n<span class=\"nv\">$write</span>\nfail:<span class=\"w\"> </span>folha<span class=\"w\"> </span>incompleta\n<span class=\"nv\">$show</span>\ncalibre:<span class=\"w\"> </span><span class=\"m\">0</span>.9,<span class=\"w\"> </span>grafite:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>.9:4B:10<span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/grafite/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/grafite/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/grafite/.cache/draft/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT inserindo grafites\ninit 0.5\nshow\nend\n======== EXPECT\n$init 0.5\n$show\ncalibre: 0.5, grafite: null\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT incompativel\ninit 0.5\nshow\ninsert 0.7 2B 50\ninsert 0.5 2B 50\nshow\nend\n======== EXPECT\n$init 0.5\n$show\ncalibre: 0.5, grafite: null\n$insert 0.7 2B 50\nfail: calibre incompativel\n$insert 0.5 2B 50\n$show\ncalibre: 0.5, grafite: [0.5:2B:50]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT inserindo\ninit 0.3\ninsert 0.3 2B 50\nshow\nend\n======== EXPECT\n$init 0.3\n$insert 0.3 2B 50\n$show\ncalibre: 0.3, grafite: [0.3:2B:50]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT ja existe\ninit 0.3\ninsert 0.3 2B 50\nshow\ninsert 0.3 4B 70\nshow\nend\n======== EXPECT\n$init 0.3\n$insert 0.3 2B 50\n$show\ncalibre: 0.3, grafite: [0.3:2B:50]\n$insert 0.3 4B 70\nfail: ja existe grafite\n$show\ncalibre: 0.3, grafite: [0.3:2B:50]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT removendo\ninit 0.3\ninsert 0.3 2B 50\nshow\ninsert 0.3 4B 70\nshow\nremove\nshow\nend\n======== EXPECT\n$init 0.3\n$insert 0.3 2B 50\n$show\ncalibre: 0.3, grafite: [0.3:2B:50]\n$insert 0.3 4B 70\nfail: ja existe grafite\n$show\ncalibre: 0.3, grafite: [0.3:2B:50]\n$remove\n$show\ncalibre: 0.3, grafite: null\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT reinserindo\ninit 0.3\ninsert 0.3 2B 50\nshow\ninsert 0.3 4B 70\nshow\nremove\nshow\ninsert 0.3 4B 70\nshow\nend\n======== EXPECT\n$init 0.3\n$insert 0.3 2B 50\n$show\ncalibre: 0.3, grafite: [0.3:2B:50]\n$insert 0.3 4B 70\nfail: ja existe grafite\n$show\ncalibre: 0.3, grafite: [0.3:2B:50]\n$remove\n$show\ncalibre: 0.3, grafite: null\n$insert 0.3 4B 70\n$show\ncalibre: 0.3, grafite: [0.3:4B:70]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sem grafite\ninit 0.9\nwrite\nend\n======== EXPECT\n$init 0.9\n$write\nfail: nao existe grafite\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT escrevendo 1\ninit 0.9\nwrite\ninsert 0.9 4B 14\nwrite\nwrite\nshow\nend\n======== EXPECT\n$init 0.9\n$write\nfail: nao existe grafite\n$insert 0.9 4B 14\n$write\n$write\nfail: tamanho insuficiente\n$show\ncalibre: 0.9, grafite: [0.9:4B:10]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT escrevendo 2\ninit 0.9\ninsert 0.9 4B 16\nwrite\nshow\nend\n======== EXPECT\n$init 0.9\n$insert 0.9 4B 16\n$write\n$show\ncalibre: 0.9, grafite: [0.9:4B:12]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT escrevendo 3\ninit 0.9\ninsert 0.9 4B 16\nwrite\nshow\nwrite\nshow\nend\n======== EXPECT\n$init 0.9\n$insert 0.9 4B 16\n$write\n$show\ncalibre: 0.9, grafite: [0.9:4B:12]\n$write\nfail: folha incompleta\n$show\ncalibre: 0.9, grafite: [0.9:4B:10]\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "function input() { return \"\"; }\nexport {};\n\nfunction main() {\n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        }\n        // else if (cmd == \"init\") { \n        //     const thickness = parseFloat(par[1]);\n        // }\n        // else if (cmd == \"show\") { \n        // }\n        // else if (cmd == \"insert\") { \n        //     const thickness = parseFloat(par[1]);\n        //     const hardness = par[2];\n        //     const size = parseInt(par[3]);\n        // }\n        // else if (cmd == \"remove\") { \n        // }\n        // else if (cmd == \"write\") { \n        // }\n        else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\nimport java.text.DecimalFormat;\n\n\npublic class Shell {\n    public static void main(String[] args) {\n\n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            // else if (cmd.equals(\"init\")) { \n            //     var thickness = Double.parseDouble(par[1]);\n            // }\n            // else if (cmd.equals(\"show\")) { \n            // }\n            // else if (cmd.equals(\"insert\")) { \n            //     var thickness = Double.parseDouble(par[1]);\n            //     var hardness = par[2];\n            //     var size = Integer.parseInt(par[3]);\n            // }\n            // else if (cmd.equals(\"remove\")) { \n            // }\n            // else if (cmd.equals(\"write\")) { \n            // }\n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <memory>\n#include <utility> //exchange\n#include <sstream>\nusing namespace std;\n\nint main() {\n    \n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } \n        // else if (cmd == \"show\") { \n        // }\n        // else if (cmd == \"init\") { \n        //     float thickness;\n        //     ss >> thickness;\n        // }\n        // else if (cmd == \"insert\") { \n        //     float thickness;\n        //     string hardness;\n        //     int size;\n        //     ss >> thickness >> hardness >> size;\n        // }\n        // else if (cmd == \"remove\") { \n        // }\n        // else if (cmd == \"write\") { \n        // }\n        else {\n            cout << \"fail: comando invalido\" << endl;\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
