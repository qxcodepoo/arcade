{
    "title": "@porquinho: Guardando moedas e itens em um cofrinho",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@porquinho: Guardando moedas e itens em um cofrinho</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Guardando moedas e itens em um cofrinho</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/porquinho/cover.jpg\" /></p>\n<h2>Intro</h2>\n<p>A classe Pig (Porquinho) representa um cofre que permite aos usu\u00e1rios adicionar moedas e itens, que s\u00e3o armazenados com base no volume dispon\u00edvel. O cofre tem uma capacidade m\u00e1xima de volume e pode ser quebrado para extrair o conte\u00fado.</p>\n<h3>Responsabilidades</h3>\n<ul>\n<li>\n<p><strong>Adicionar Moedas e Itens:</strong></p>\n<ul>\n<li>Os usu\u00e1rios podem adicionar moedas e itens ao cofrinho.</li>\n<li>A adi\u00e7\u00e3o \u00e9 limitada pela capacidade m\u00e1xima de volume do porquinho.</li>\n</ul>\n</li>\n<li>\n<p><strong>Quebrar o Cofrinho:</strong></p>\n<ul>\n<li>Os usu\u00e1rios podem quebrar o cofrinho para extrair seu conte\u00fado.</li>\n<li>Uma vez quebrado, o cofrinho n\u00e3o pode mais receber adi\u00e7\u00f5es.</li>\n</ul>\n</li>\n<li>\n<p><strong>Extrair Moedas e Itens:</strong></p>\n<ul>\n<li>Ap\u00f3s quebrar o cofrinho, os usu\u00e1rios podem extrair as moedas e itens armazenados.</li>\n<li>As moedas e itens s\u00e3o removidos do cofrinho e retornados ao usu\u00e1rio.</li>\n</ul>\n</li>\n<li>\n<p><strong>Obter Valor e Volume Total:</strong></p>\n<ul>\n<li>Os usu\u00e1rios podem verificar o valor total das moedas armazenadas no cofrinho.</li>\n<li>Tamb\u00e9m podem verificar o volume total ocupado pelos itens e moedas.</li>\n</ul>\n</li>\n</ul>\n<h2>Guide</h2>\n<p><img alt=\"diagrama\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/porquinho/diagrama.png\" /></p>\n<p><a href=\"https://youtu.be/rR2bIGsJjaw?si=VMEWLD5vWozDPX02\"><img alt=\"youtube icon\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/porquinho/../yousolver.png\" /></a></p>\n<h3>Classe Coin</h3>\n<ul>\n<li>A classe <code>Coin</code> possui os seguintes atributos:<ul>\n<li><code>value</code>: Valor da moeda.</li>\n<li><code>volume</code>: Volume da moeda.</li>\n<li><code>label</code>: R\u00f3tulo da moeda.</li>\n</ul>\n</li>\n<li>Al\u00e9m disso, a classe possui os seguintes m\u00e9todos:<ul>\n<li><code>toString(): string</code>: Retorna uma representa\u00e7\u00e3o em string da moeda no formato <code>f\"{this.value.2f}, {this.volume}\"</code></li>\n<li><code>getValue(): number</code>: Retorna o valor da moeda.</li>\n<li><code>getVolume(): number</code>: Retorna o volume da moeda.</li>\n<li><code>getLabel(): string</code>: Retorna o r\u00f3tulo da moeda.</li>\n</ul>\n</li>\n</ul>\n<h4>M\u00e9todo Est\u00e1tico</h4>\n<p>A classe <code>Coin</code> possui m\u00e9todos est\u00e1ticos para criar inst\u00e2ncias de moedas com valores pr\u00e9-definidos:</p>\n<div class=\"language-typescript highlight\"><pre><span></span><code><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"nx\">C10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"nx\">Coin</span><span class=\"p\">(</span><span class=\"mf\">0.10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;C10&quot;</span><span class=\"p\">);</span>\n<span class=\"k\">public</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"nx\">C25</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"nx\">Coin</span><span class=\"p\">(</span><span class=\"mf\">0.25</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;C25&quot;</span><span class=\"p\">);</span>\n<span class=\"k\">public</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"nx\">C50</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"nx\">Coin</span><span class=\"p\">(</span><span class=\"mf\">0.50</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;C50&quot;</span><span class=\"p\">);</span>\n<span class=\"k\">public</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"nx\">C100</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"nx\">Coin</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;C100&quot;</span><span class=\"p\">);</span>\n</code></pre></div>\n<h3>Classe Item</h3>\n<p>A classe <code>Item</code> possui os seguintes atributos:</p>\n<ul>\n<li><code>label</code>: R\u00f3tulo do item.</li>\n<li><code>volume</code>: Volume do item.</li>\n</ul>\n<p>Al\u00e9m disso, a classe possui os seguintes m\u00e9todos:</p>\n<ul>\n<li><code>getLabel(): string</code>: Retorna o r\u00f3tulo do item.</li>\n<li><code>getVolume(): number</code>: Retorna o volume do item.</li>\n<li><code>setVolume(volume: number): void</code>: Define o volume do item.</li>\n<li><code>setLabel(label: string): void</code>: Define o r\u00f3tulo do item.</li>\n<li><code>toString(): string</code>: Retorna uma representa\u00e7\u00e3o em string do item.<ul>\n<li>Formato de retorno: <code>label:volume</code></li>\n</ul>\n</li>\n</ul>\n<h3>Classe Pig</h3>\n<p>A classe <code>Pig</code> possui os seguintes atributos:</p>\n<ul>\n<li><code>items</code>: Array de itens.</li>\n<li><code>coins</code>: Array de moedas.</li>\n<li><code>volumeMax</code>: Volume m\u00e1ximo suportado pela \"cochonilha\".</li>\n<li>\n<p><code>broken</code>: Indica se a \"cochonilha\" est\u00e1 quebrada ou n\u00e3o.</p>\n</li>\n<li>\n<p><strong>Defini\u00e7\u00e3o da Classe Pig:</strong></p>\n<ul>\n<li>Definir a classe <code>Pig</code> com os atributos <code>items</code>, <code>coins</code>, <code>volumeMax</code> e <code>broken</code>.</li>\n<li>Implementar o construtor que recebe <code>volumeMax</code> como par\u00e2metro e o atribui \u00e0 propriedade <code>volumeMax</code>.</li>\n<li>Inicializar os arrays <code>items</code> e <code>coins</code> como vazios.</li>\n<li>Inicializar a propriedade <code>broken</code> como <code>false</code>.</li>\n</ul>\n</li>\n<li>\n<p><strong>Implementa\u00e7\u00e3o dos M\u00e9todos:</strong></p>\n<ul>\n<li>\n<p><strong>M\u00e9todo <code>addCoin(coin: Coin): boolean</code></strong></p>\n<ul>\n<li>Aiciona uma moeda ao vetor de moedas.</li>\n<li>Par\u00e2metros:<ul>\n<li><code>coin</code>: Moeda a ser adicionada.</li>\n</ul>\n</li>\n<li>Retorna <code>true</code> se a adi\u00e7\u00e3o for bem-sucedida, caso contr\u00e1rio, retorna <code>false</code>.</li>\n<li>Erro: <code>fail: the pig is broken</code> se o porquinho estiver quebrado.</li>\n<li>Erro: <code>fail: the pig is full</code> se o porquinho estiver cheio.</li>\n</ul>\n</li>\n<li>\n<p><strong>M\u00e9todo <code>addItem(item: Item): boolean</code></strong></p>\n<ul>\n<li>Adiciona um item ao vetor de itens.</li>\n<li>Par\u00e2metros:<ul>\n<li><code>item</code>: Item a ser adicionado.</li>\n</ul>\n</li>\n<li>Retorna <code>true</code> se a adi\u00e7\u00e3o for bem-sucedida, caso contr\u00e1rio, retorna <code>false</code>.</li>\n<li>Erro: <code>fail: the pig is broken</code> se o porquinho estiver quebrado.</li>\n<li>Erro: <code>fail: the pig is full</code> se o porquinho estiver cheio.</li>\n</ul>\n</li>\n<li>\n<p><strong>M\u00e9todo <code>getVolume(): number</code></strong></p>\n<ul>\n<li>Retorna o volume total ocupado pelo conte\u00fado do porquinho.\n <strong>Passos:</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>Verifica\u00e7\u00e3o de Estado:</strong>\n          - Verifica se o porquinho est\u00e1 quebrada.\n              - Se estiver quebrado, retorna volume 0.</p>\n</li>\n<li>\n<p><strong>C\u00e1lculo do Volume:</strong>\n          - Inicializa a vari\u00e1vel <code>volume</code> com valor 0.\n          - Percorre o array de itens e adiciona o volume de cada item \u00e0 vari\u00e1vel <code>volume</code>.\n          - Percorre o array de moedas e adiciona o volume de cada moeda \u00e0 vari\u00e1vel <code>volume</code>.\n          - Retorna o valor total de <code>volume</code>.</p>\n</li>\n<li>\n<p><strong>M\u00e9todo <code>getValue(): number</code></strong></p>\n<ul>\n<li>Retorna o valor total das moedas no porquinho.\n <strong>Passos:</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>C\u00e1lculo do Valor:</strong>\n          - Inicializa a vari\u00e1vel <code>value</code> com valor 0.\n          - Percorre o array de moedas e adiciona o valor de cada moeda \u00e0 vari\u00e1vel <code>value</code>.\n          - Retorna o valor total de <code>value</code>.</p>\n</li>\n<li>\n<p><strong>M\u00e9todo <code>breakPig(): boolean</code></strong></p>\n<ul>\n<li>Quebra o porquinho, tornando-o inutiliz\u00e1vel.</li>\n<li>Define a propriedade <code>broken</code> como <code>true</code>.</li>\n<li>Retorna <code>true</code> se a quebra for bem-sucedida, caso contr\u00e1rio, retorna <code>false</code>.</li>\n<li>Erro: <code>fail: the pig is already broken</code> se o porquinho j\u00e1 estiver quebrado.</li>\n</ul>\n</li>\n<li>\n<p><strong>M\u00e9todo <code>extractCoins(): Coin[]</code></strong></p>\n<ul>\n<li>Remove e retorna todas as moedas do porquinho.</li>\n<li>Retorna um array com todas as moedas removidas.</li>\n<li>Erro: <code>fail: you must break the pig first</code> se o porquinho n\u00e3o estiver quebrado.</li>\n</ul>\n</li>\n<li>\n<p><strong>M\u00e9todo <code>extractItems(): Item[]</code></strong></p>\n<ul>\n<li>Remove e retorna todos os itens do porquinho.</li>\n<li>Retorna um array com todos os itens removidos.</li>\n<li>Erro: <code>fail: you must break the pig first</code> se o porquinho n\u00e3o estiver quebrado.</li>\n</ul>\n</li>\n<li>\n<p><strong>M\u00e9todo <code>toString(): string</code></strong></p>\n<ul>\n<li>Retorna uma representa\u00e7\u00e3o em string do estado atual do porquinho, incluindo se est\u00e1 intacto ou quebrado, a lista de moedas e itens armazenados, o valor total e o volume ocupado.</li>\n<li>Formato de retorno: <code>state=estado : coins=[moedas] : items=[itens] : value=valor : volume=volumeAtual/volumeMaximo</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/porquinho/.cache/draft/Solver.java\">Solver.java</a></li>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/porquinho/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/porquinho/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/porquinho/.cache/draft/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n\n<h2>Shell</h2>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE init</span>\n<span class=\"err\">$</span><span class=\"n\">init</span> <span class=\"mi\">20</span>\n<span class=\"err\">$</span><span class=\"n\">show</span>\n<span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">intact</span> <span class=\"p\">:</span> <span class=\"n\">coins</span><span class=\"o\">=</span><span class=\"p\">[]</span> <span class=\"p\">:</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"p\">[]</span> <span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mf\">0.00</span> <span class=\"p\">:</span> <span class=\"n\">volume</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">/</span><span class=\"mi\">20</span>\n\n<span class=\"c1\">#TEST_CASE insert</span>\n<span class=\"err\">$</span><span class=\"n\">addCoin</span> <span class=\"mi\">10</span>\n<span class=\"err\">$</span><span class=\"n\">addCoin</span> <span class=\"mi\">50</span>\n<span class=\"err\">$</span><span class=\"n\">show</span>\n<span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">intact</span> <span class=\"p\">:</span> <span class=\"n\">coins</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.10</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.50</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"p\">[]</span> <span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mf\">0.60</span> <span class=\"p\">:</span> <span class=\"n\">volume</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"o\">/</span><span class=\"mi\">20</span>\n\n<span class=\"c1\">#TEST_CASE itens</span>\n<span class=\"err\">$</span><span class=\"n\">addItem</span> <span class=\"n\">ouro</span> <span class=\"mi\">3</span>\n<span class=\"err\">$</span><span class=\"n\">show</span>\n<span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">intact</span> <span class=\"p\">:</span> <span class=\"n\">coins</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.10</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.50</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">ouro</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mf\">0.60</span> <span class=\"p\">:</span> <span class=\"n\">volume</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"o\">/</span><span class=\"mi\">20</span>\n\n<span class=\"err\">$</span><span class=\"n\">addItem</span> <span class=\"n\">passaporte</span> <span class=\"mi\">2</span>\n<span class=\"err\">$</span><span class=\"n\">show</span>\n<span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">intact</span> <span class=\"p\">:</span> <span class=\"n\">coins</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.10</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.50</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">ouro</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">passaporte</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mf\">0.60</span> <span class=\"p\">:</span> <span class=\"n\">volume</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"o\">/</span><span class=\"mi\">20</span>\n\n<span class=\"c1\">#TEST_CASE failed break</span>\n<span class=\"err\">$</span><span class=\"n\">extractItems</span>\n<span class=\"n\">fail</span><span class=\"p\">:</span> <span class=\"n\">you</span> <span class=\"n\">must</span> <span class=\"k\">break</span> <span class=\"n\">the</span> <span class=\"n\">pig</span> <span class=\"n\">first</span>\n<span class=\"p\">[]</span>\n\n<span class=\"err\">$</span><span class=\"n\">extractCoins</span>\n<span class=\"n\">fail</span><span class=\"p\">:</span> <span class=\"n\">you</span> <span class=\"n\">must</span> <span class=\"k\">break</span> <span class=\"n\">the</span> <span class=\"n\">pig</span> <span class=\"n\">first</span>\n<span class=\"p\">[]</span>\n\n<span class=\"err\">$</span><span class=\"n\">show</span>\n<span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">intact</span> <span class=\"p\">:</span> <span class=\"n\">coins</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.10</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.50</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">ouro</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">passaporte</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mf\">0.60</span> <span class=\"p\">:</span> <span class=\"n\">volume</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"o\">/</span><span class=\"mi\">20</span>\n\n<span class=\"c1\">#TEST_CASE breaking</span>\n<span class=\"err\">$</span><span class=\"k\">break</span>\n<span class=\"err\">$</span><span class=\"n\">show</span>\n<span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">broken</span> <span class=\"p\">:</span> <span class=\"n\">coins</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.10</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.50</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">ouro</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">passaporte</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mf\">0.60</span> <span class=\"p\">:</span> <span class=\"n\">volume</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">/</span><span class=\"mi\">20</span>\n\n<span class=\"c1\">#TEST_CASE getItems</span>\n\n<span class=\"err\">$</span><span class=\"n\">extractItems</span>\n<span class=\"p\">[</span><span class=\"n\">ouro</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">passaporte</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"err\">$</span><span class=\"n\">show</span>\n<span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">broken</span> <span class=\"p\">:</span> <span class=\"n\">coins</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.10</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.50</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"p\">[]</span> <span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mf\">0.60</span> <span class=\"p\">:</span> <span class=\"n\">volume</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">/</span><span class=\"mi\">20</span>\n\n<span class=\"c1\">#TEST_CASE getCoins</span>\n\n<span class=\"err\">$</span><span class=\"n\">extractCoins</span>\n<span class=\"p\">[</span><span class=\"mf\">0.10</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.50</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"err\">$</span><span class=\"n\">show</span>\n<span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">broken</span> <span class=\"p\">:</span> <span class=\"n\">coins</span><span class=\"o\">=</span><span class=\"p\">[]</span> <span class=\"p\">:</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"p\">[]</span> <span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mf\">0.00</span> <span class=\"p\">:</span> <span class=\"n\">volume</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">/</span><span class=\"mi\">20</span>\n<span class=\"err\">$</span><span class=\"n\">end</span>\n</code></pre></div>\n<hr />\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">10</span>\n\n<span class=\"nv\">$break</span>\n\n<span class=\"nv\">$addCoin</span><span class=\"w\"> </span><span class=\"m\">10</span>\nfail:<span class=\"w\"> </span>the<span class=\"w\"> </span>pig<span class=\"w\"> </span>is<span class=\"w\"> </span>broken\n\n\n<span class=\"nv\">$show</span>\n<span class=\"nv\">state</span><span class=\"o\">=</span>broken<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">coins</span><span class=\"o\">=[]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">items</span><span class=\"o\">=[]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"o\">=</span><span class=\"m\">0</span>.00<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">volume</span><span class=\"o\">=</span><span class=\"m\">0</span>/10\n\n<span class=\"nv\">$addItem</span><span class=\"w\"> </span>bilhete<span class=\"w\"> </span><span class=\"m\">2</span>\nfail:<span class=\"w\"> </span>the<span class=\"w\"> </span>pig<span class=\"w\"> </span>is<span class=\"w\"> </span>broken\n\n<span class=\"nv\">$show</span>\n<span class=\"nv\">state</span><span class=\"o\">=</span>broken<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">coins</span><span class=\"o\">=[]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">items</span><span class=\"o\">=[]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"o\">=</span><span class=\"m\">0</span>.00<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">volume</span><span class=\"o\">=</span><span class=\"m\">0</span>/10\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<hr />\n<div class=\"language-sh highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE full coin</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">5</span>\n\n<span class=\"nv\">$addCoin</span><span class=\"w\"> </span><span class=\"m\">10</span>\n<span class=\"nv\">$addCoin</span><span class=\"w\"> </span><span class=\"m\">25</span>\n<span class=\"nv\">$show</span>\n<span class=\"nv\">state</span><span class=\"o\">=</span>intact<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">coins</span><span class=\"o\">=[</span><span class=\"m\">0</span>.10:1,<span class=\"w\"> </span><span class=\"m\">0</span>.25:2<span class=\"o\">]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">items</span><span class=\"o\">=[]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"o\">=</span><span class=\"m\">0</span>.35<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">volume</span><span class=\"o\">=</span><span class=\"m\">3</span>/5\n\n<span class=\"nv\">$addCoin</span><span class=\"w\"> </span><span class=\"m\">50</span>\nfail:<span class=\"w\"> </span>the<span class=\"w\"> </span>pig<span class=\"w\"> </span>is<span class=\"w\"> </span>full\n\n<span class=\"nv\">$show</span>\n<span class=\"nv\">state</span><span class=\"o\">=</span>intact<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">coins</span><span class=\"o\">=[</span><span class=\"m\">0</span>.10:1,<span class=\"w\"> </span><span class=\"m\">0</span>.25:2<span class=\"o\">]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">items</span><span class=\"o\">=[]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"o\">=</span><span class=\"m\">0</span>.35<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">volume</span><span class=\"o\">=</span><span class=\"m\">3</span>/5\n\n<span class=\"c1\">#TEST_CASE full item</span>\n<span class=\"nv\">$addItem</span><span class=\"w\"> </span>ouro<span class=\"w\"> </span><span class=\"m\">1</span>\n\n<span class=\"nv\">$show</span>\n<span class=\"nv\">state</span><span class=\"o\">=</span>intact<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">coins</span><span class=\"o\">=[</span><span class=\"m\">0</span>.10:1,<span class=\"w\"> </span><span class=\"m\">0</span>.25:2<span class=\"o\">]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">items</span><span class=\"o\">=[</span>ouro:1<span class=\"o\">]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"o\">=</span><span class=\"m\">0</span>.35<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">volume</span><span class=\"o\">=</span><span class=\"m\">4</span>/5\n\n<span class=\"nv\">$addItem</span><span class=\"w\"> </span>pirulito<span class=\"w\"> </span><span class=\"m\">2</span>\nfail:<span class=\"w\"> </span>the<span class=\"w\"> </span>pig<span class=\"w\"> </span>is<span class=\"w\"> </span>full\n\n<span class=\"nv\">$show</span>\n<span class=\"nv\">state</span><span class=\"o\">=</span>intact<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">coins</span><span class=\"o\">=[</span><span class=\"m\">0</span>.10:1,<span class=\"w\"> </span><span class=\"m\">0</span>.25:2<span class=\"o\">]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">items</span><span class=\"o\">=[</span>ouro:1<span class=\"o\">]</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"o\">=</span><span class=\"m\">0</span>.35<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">volume</span><span class=\"o\">=</span><span class=\"m\">4</span>/5\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT init\ninit 20\nshow\nend\n======== EXPECT\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT insert\ninit 20\nshow\naddCoin 10\naddCoin 50\nshow\nend\n======== EXPECT\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT itens\ninit 20\nshow\naddCoin 10\naddCoin 50\nshow\naddItem ouro 3\nshow\naddItem passaporte 2\nshow\nend\n======== EXPECT\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n$addItem ouro 3\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3] : value=0.60 : volume=7/20\n$addItem passaporte 2\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT failed break\ninit 20\nshow\naddCoin 10\naddCoin 50\nshow\naddItem ouro 3\nshow\naddItem passaporte 2\nshow\nextractItems\nextractCoins\nshow\nend\n======== EXPECT\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n$addItem ouro 3\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3] : value=0.60 : volume=7/20\n$addItem passaporte 2\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$extractItems\nfail: you must break the pig first\n[]\n$extractCoins\nfail: you must break the pig first\n[]\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT breaking\ninit 20\nshow\naddCoin 10\naddCoin 50\nshow\naddItem ouro 3\nshow\naddItem passaporte 2\nshow\nextractItems\nextractCoins\nshow\nbreak\nshow\nend\n======== EXPECT\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n$addItem ouro 3\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3] : value=0.60 : volume=7/20\n$addItem passaporte 2\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$extractItems\nfail: you must break the pig first\n[]\n$extractCoins\nfail: you must break the pig first\n[]\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$break\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=0/20\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT getItems\ninit 20\nshow\naddCoin 10\naddCoin 50\nshow\naddItem ouro 3\nshow\naddItem passaporte 2\nshow\nextractItems\nextractCoins\nshow\nbreak\nshow\nextractItems\nshow\nend\n======== EXPECT\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n$addItem ouro 3\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3] : value=0.60 : volume=7/20\n$addItem passaporte 2\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$extractItems\nfail: you must break the pig first\n[]\n$extractCoins\nfail: you must break the pig first\n[]\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$break\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=0/20\n$extractItems\n[ouro:3, passaporte:2]\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=0/20\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT getCoins\ninit 20\nshow\naddCoin 10\naddCoin 50\nshow\naddItem ouro 3\nshow\naddItem passaporte 2\nshow\nextractItems\nextractCoins\nshow\nbreak\nshow\nextractItems\nshow\nextractCoins\nshow\nend\n======== EXPECT\n$init 20\n$show\nstate=intact : coins=[] : items=[] : value=0.00 : volume=0/20\n$addCoin 10\n$addCoin 50\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=4/20\n$addItem ouro 3\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3] : value=0.60 : volume=7/20\n$addItem passaporte 2\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$extractItems\nfail: you must break the pig first\n[]\n$extractCoins\nfail: you must break the pig first\n[]\n$show\nstate=intact : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=9/20\n$break\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[ouro:3, passaporte:2] : value=0.60 : volume=0/20\n$extractItems\n[ouro:3, passaporte:2]\n$show\nstate=broken : coins=[0.10:1, 0.50:3] : items=[] : value=0.60 : volume=0/20\n$extractCoins\n[0.10:1, 0.50:3]\n$show\nstate=broken : coins=[] : items=[] : value=0.00 : volume=0/20\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\ninit 10\nbreak\naddCoin 10\nshow\naddItem bilhete 2\nshow\nend\n======== EXPECT\n$init 10\n$break\n$addCoin 10\nfail: the pig is broken\n$show\nstate=broken : coins=[] : items=[] : value=0.00 : volume=0/10\n$addItem bilhete 2\nfail: the pig is broken\n$show\nstate=broken : coins=[] : items=[] : value=0.00 : volume=0/10\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT full coin\ninit 5\naddCoin 10\naddCoin 25\nshow\naddCoin 50\nshow\nend\n======== EXPECT\n$init 5\n$addCoin 10\n$addCoin 25\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[] : value=0.35 : volume=3/5\n$addCoin 50\nfail: the pig is full\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[] : value=0.35 : volume=3/5\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT full item\ninit 5\naddCoin 10\naddCoin 25\nshow\naddCoin 50\nshow\naddItem ouro 1\nshow\naddItem pirulito 2\nshow\nend\n======== EXPECT\n$init 5\n$addCoin 10\n$addCoin 25\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[] : value=0.35 : volume=3/5\n$addCoin 50\nfail: the pig is full\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[] : value=0.35 : volume=3/5\n$addItem ouro 1\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[ouro:1] : value=0.35 : volume=4/5\n$addItem pirulito 2\nfail: the pig is full\n$show\nstate=intact : coins=[0.10:1, 0.25:2] : items=[ouro:1] : value=0.35 : volume=4/5\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\nfunction main() {\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        }\n        else if (cmd == \"init\") {\n            // const volume = parseInt(par[1]);\n        }\n        else if (cmd == \"show\") {\n        }\n        else if (cmd == \"addCoin\") {\n            // const value = parseInt(par[1]);\n        }\n        else if (cmd == \"addItem\") {\n            // const label = par[1];\n            // const volume = parseInt(par[2]);\n        }\n        else if (cmd == \"break\") {\n        }\n        else if (cmd == \"extractCoins\") {\n        }\n        else if (cmd == \"extractItems\") {\n        }\n        else {\n            console.log(\"fail: invalid command\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.StringJoiner;\nimport java.util.stream.Collectors;\n\npublic class Shell {\n    public static void main(String[] _args) {\n\n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"init\")) {\n                // int maxVolume = Integer.parseInt(par[1]);\n            }\n            else if (cmd.equals(\"show\")) {\n                // Imprima o estado do porquinho\n            }\n            else if (cmd.equals(\"addCoin\")) {\n                // var coin = par[1];\n            }\n            else if (cmd.equals(\"addItem\")) {\n                // var item = par[1];\n                // var volume = Integer.parseInt(par[2]);\n            }\n            else if (cmd.equals(\"break\")) {\n                // pig.breakPig();\n            }\n            else if (cmd.equals(\"extractCoins\")) {\n                // Obtenha as moedas usando o m\u00e9todo extractCoins\n                // Imprima as moedas obtidas\n            }\n            else if (cmd.equals(\"extractItems\")) {\n                // Obtenha os itens usando o m\u00e9todo extractItems\n                // Imprima os itens obtidos\n            }\n            else {\n                System.out.println(\"fail: invalid command\");\n            }\n        }\n    }\n\n    public static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include <utility>\n#include <iomanip>\n#include <memory>\nusing namespace std;\n\ntemplate <typename CONTAINER, typename FN>\nstring map_join(const CONTAINER& container, FN fn, string sep = \", \", string prefix = \"[\", string suffix = \"]\") {\n    stringstream ss;\n    for (auto it = container.begin(); it != container.end(); ++it) {\n        ss << (it != container.begin() ? sep : \"\") << fn(*it);\n    }\n    return prefix + ss.str() + suffix;\n}\n\nint main() {\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"init\") {\n            // int volumeMax;\n            // ss >> volumeMax;\n        } else if (cmd == \"show\") {\n        } else if (cmd == \"break\") {\n        } else if (cmd == \"addCoin\") {\n            // string label;\n            // ss >> label;\n        } else if (cmd == \"addItem\") {\n            // string label;\n            // int volume;\n            // ss >> label >> volume;\n        } else if (cmd == \"extractItems\") {\n            // Obtenha os itens com o m\u00e9todo extractItems\n            // e imprima os itens obtidos\n        } else if (cmd == \"extractCoins\") {\n            // Obtenha as moedas com o m\u00e9todo extractCoins\n            // e imprima as moedas obtidas\n        } else {\n            cout << \"fail: invalid command\\n\";\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
