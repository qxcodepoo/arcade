{
    "title": "@tabuleiro: Jogo de tabuleiro e armadilhas",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@tabuleiro: Jogo de tabuleiro e armadilhas</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Jogo de tabuleiro e armadilhas</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/tabuleiro/cover.jpg\" /></p>\n<h2>Intro</h2>\n<p>Nosso jogo consiste em um tabuleiro contendo uma trilha de quadrados e um conjunto de pe\u00e7as coloridas. No in\u00edcio do jogo, cada jogador recebe uma pe\u00e7a; todas as pe\u00e7as s\u00e3o inicialmente posicionadas na posi\u00e7\u00e3o 0 da trilha.</p>\n<p>O jogo prossegue em rodadas. Em cada rodada, os jogadores rolam um D20 (dado de 20 faces) e movem suas pe\u00e7as para frente um n\u00famero de quadrados igual ao resultado obtido pelos dados. Os jogadores rolam os dados sempre na mesma ordem (jogador A, depois jogador B, etc.) nas rodadas.</p>\n<p>A maioria dos quadrados no tabuleiro s\u00e3o quadrados simples, mas alguns s\u00e3o \u201carmadilhas\u201d. Se a pe\u00e7a de um jogador cair em um quadrado da armadilha no final do movimento do jogador. O jogador ficar\u00e1 preso na armadilha at\u00e9 que na sua rodada jogue um n\u00famero par se libertando da armadilha. Ao rolar um n\u00famero par e se libertar da armadilha, sua pe\u00e7a n\u00e3o se move nessa rodada, mas na pr\u00f3xima poder\u00e1 se mover normalmente.</p>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/tabuleiro/tabuleiro.png\" /></p>\n<p>Haver\u00e1 exatamente tr\u00eas armadilhas na trilha.</p>\n<p>O vencedor do jogo \u00e9 o jogador cuja pe\u00e7a chega primeiro ao final da trilha. O fim da trilha \u00e9 depois da \u00faltima casa do tabuleiro. Considere, por exemplo, a placa da figura acima, que tem quadrados numerados de 1 a 48. No in\u00edcio, as pe\u00e7as s\u00e3o posicionadas no local marcado como 'In\u00edcio', ou seja, antes do quadrado n\u00famero 1. Portanto, se um jogador rolar um 7, sua pe\u00e7a \u00e9 posicionada na casa n\u00famero 7 no final da primeira rodada do jogo.\nAl\u00e9m disso, se a pe\u00e7a de um jogador estiver posicionada na casa 41, o jogador precisa de um resultado de rolagem de pelo menos 8 para chegar ao final da trilha e ganhar o jogo. Observe tamb\u00e9m que n\u00e3o haver\u00e1 empate no jogo.</p>\n<hr />\n<p>Quest\u00e3o adaptada da maratona ACM 2003 por @WladimirTavares</p>\n<hr />\n<h2>Draft</h2>\n<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/tabuleiro/.cache/draft.ts\">solver.ts</a></li>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/tabuleiro/.cache/draft.cpp\">solver.cpp</a></li>\n</ul>\n<h2>Guide</h2>\n<p><a href=\"https://youtu.be/x3_hlVYdCdU?si=g0fR-AAgvzkMxU9G\"><img alt=\"youtube icon\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/tabuleiro/../youguide.png\" /></a></p>\n<p><img alt=\"diagrama\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/tabuleiro/diagrama.png\" /></p>\n<!-- load diagrama.puml fenced=ts:filter -->\n\n<div class=\"language-ts highlight\"><pre><span></span><code><span class=\"kd\">@startuml</span>\n\n<span class=\"nx\">skinparam</span><span class=\"w\"> </span><span class=\"nx\">defaultFontName</span><span class=\"w\"> </span><span class=\"s2\">&quot;Source Code Pro&quot;</span>\n<span class=\"nx\">skinparam</span><span class=\"w\"> </span><span class=\"nx\">dpi</span><span class=\"w\"> </span><span class=\"mf\">150</span>\n<span class=\"nx\">left</span><span class=\"w\"> </span><span class=\"nx\">to</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"w\"> </span><span class=\"nx\">direction</span>\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"nx\">Player</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">label</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"w\">  </span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">pos</span><span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">free</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">boolean</span>\n<span class=\"w\">  </span><span class=\"nx\">__</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Player</span><span class=\"p\">(</span><span class=\"nx\">label</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">isFree</span><span class=\"p\">()</span><span class=\"w\">   </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">boolean</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">toString</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">string</span>\n<span class=\"w\">  </span><span class=\"nx\">__</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">getLabel</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">getPos</span><span class=\"p\">()</span><span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">setPos</span><span class=\"p\">(</span><span class=\"nx\">pos</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">setFree</span><span class=\"p\">(</span><span class=\"nx\">free</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">boolean</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"ow\">void</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"nx\">Board</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">trapList</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Array</span><span class=\"o\">&lt;</span><span class=\"kt\">number</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">players</span><span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">Player</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">running</span><span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">boolean</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">boardSize</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span>\n<span class=\"w\">  </span><span class=\"nx\">__</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Board</span><span class=\"p\">(</span><span class=\"nx\">nPlayers</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">boardSize</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">toString</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">string</span>\n<span class=\"w\">  </span><span class=\"nx\">__</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">addTrap</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">pos</span><span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"ow\">void</span>\n<span class=\"w\">  </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">rollDice</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"ow\">void</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">Board</span><span class=\"w\"> </span><span class=\"s2\">&quot;1&quot;</span><span class=\"w\"> </span><span class=\"o\">*--</span><span class=\"w\">  </span><span class=\"s2\">&quot;2..*&quot;</span><span class=\"w\"> </span><span class=\"nx\">Player</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nx\">has</span>\n<span class=\"kd\">@enduml</span>\n</code></pre></div>\n<!-- load -->\n\n<hr />\n<h2>Shell</h2>\n<div class=\"language-s highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE init</span>\n<span class=\"o\">$</span><span class=\"n\">init</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">10</span>\n<span class=\"o\">$</span><span class=\"n\">show</span>\n<span class=\"n\">player1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"n\">..........</span>\n<span class=\"n\">player2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"n\">..........</span>\n<span class=\"n\">traps__</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">...........</span>\n\n<span class=\"o\">$</span><span class=\"n\">addTrap</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"o\">$</span><span class=\"n\">addTrap</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"o\">$</span><span class=\"n\">addTrap</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"o\">$</span><span class=\"n\">show</span>\n<span class=\"n\">player1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"n\">..........</span>\n<span class=\"n\">player2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"n\">..........</span>\n<span class=\"n\">traps__</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">..x.x...x..</span>\n\n<span class=\"c1\">#TEST_CASE move</span>\n<span class=\"o\">$</span><span class=\"n\">roll</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"n\">player1</span><span class=\"w\"> </span><span class=\"n\">andou</span><span class=\"w\"> </span><span class=\"n\">para</span><span class=\"w\"> </span><span class=\"m\">1</span>\n\n<span class=\"c1\">#TEST_CASE trap</span>\n<span class=\"o\">$</span><span class=\"n\">roll</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"n\">player2</span><span class=\"w\"> </span><span class=\"n\">andou</span><span class=\"w\"> </span><span class=\"n\">para</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"n\">player2</span><span class=\"w\"> </span><span class=\"n\">caiu</span><span class=\"w\"> </span><span class=\"n\">em</span><span class=\"w\"> </span><span class=\"n\">uma</span><span class=\"w\"> </span><span class=\"n\">armadilha</span>\n\n<span class=\"c1\">#TEST_CASE show</span>\n<span class=\"o\">$</span><span class=\"n\">show</span>\n<span class=\"n\">player1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">.</span><span class=\"m\">1</span><span class=\"n\">.........</span>\n<span class=\"n\">player2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">..2........</span>\n<span class=\"n\">traps__</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">..x.x...x..</span>\n\n<span class=\"c1\">#TEST_CASE keep trapped</span>\n<span class=\"o\">$</span><span class=\"n\">roll</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"n\">player1</span><span class=\"w\"> </span><span class=\"n\">andou</span><span class=\"w\"> </span><span class=\"n\">para</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"o\">$</span><span class=\"n\">roll</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"n\">player2</span><span class=\"w\"> </span><span class=\"n\">continua</span><span class=\"w\"> </span><span class=\"n\">preso</span>\n\n<span class=\"o\">$</span><span class=\"n\">show</span>\n<span class=\"n\">player1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">.....1.....</span>\n<span class=\"n\">player2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">..2........</span>\n<span class=\"n\">traps__</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">..x.x...x..</span>\n\n<span class=\"c1\">#TEST_CASE trap</span>\n<span class=\"o\">$</span><span class=\"n\">roll</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"n\">player1</span><span class=\"w\"> </span><span class=\"n\">andou</span><span class=\"w\"> </span><span class=\"n\">para</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"n\">player1</span><span class=\"w\"> </span><span class=\"n\">caiu</span><span class=\"w\"> </span><span class=\"n\">em</span><span class=\"w\"> </span><span class=\"n\">uma</span><span class=\"w\"> </span><span class=\"n\">armadilha</span>\n\n<span class=\"c1\">#TEST_CASE release</span>\n<span class=\"o\">$</span><span class=\"n\">roll</span><span class=\"w\"> </span><span class=\"m\">6</span>\n<span class=\"n\">player2</span><span class=\"w\"> </span><span class=\"n\">se</span><span class=\"w\"> </span><span class=\"n\">libertou</span>\n\n<span class=\"o\">$</span><span class=\"n\">show</span>\n<span class=\"n\">player1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">........1..</span>\n<span class=\"n\">player2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">..2........</span>\n<span class=\"n\">traps__</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">..x.x...x..</span>\n\n<span class=\"c1\">#TEST_CASE win</span>\n<span class=\"o\">$</span><span class=\"n\">roll</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"n\">player1</span><span class=\"w\"> </span><span class=\"n\">se</span><span class=\"w\"> </span><span class=\"n\">libertou</span>\n<span class=\"o\">$</span><span class=\"n\">roll</span><span class=\"w\"> </span><span class=\"m\">10</span>\n<span class=\"n\">player2</span><span class=\"w\"> </span><span class=\"n\">ganhou</span>\n\n<span class=\"c1\">#TEST_CASE boundary</span>\n<span class=\"o\">$</span><span class=\"n\">show</span>\n<span class=\"n\">player1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">........1..</span>\n<span class=\"n\">player2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">..........2</span>\n<span class=\"n\">traps__</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">..x.x...x..</span>\n\n<span class=\"c1\">#TEST_CASE game over</span>\n<span class=\"o\">$</span><span class=\"n\">roll</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"n\">game</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">over</span>\n<span class=\"o\">$</span><span class=\"n\">end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT init\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT move\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT trap\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT show\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT keep trapped\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nroll 4\nroll 3\nshow\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT trap\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nroll 4\nroll 3\nshow\nroll 3\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 3\nplayer1 andou para 8\nplayer1 caiu em uma armadilha\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT release\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nroll 4\nroll 3\nshow\nroll 3\nroll 6\nshow\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 3\nplayer1 andou para 8\nplayer1 caiu em uma armadilha\n$roll 6\nplayer2 se libertou\n$show\nplayer1: ........1..\nplayer2: ..2........\ntraps__: ..x.x...x..\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT win\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nroll 4\nroll 3\nshow\nroll 3\nroll 6\nshow\nroll 2\nroll 10\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 3\nplayer1 andou para 8\nplayer1 caiu em uma armadilha\n$roll 6\nplayer2 se libertou\n$show\nplayer1: ........1..\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 2\nplayer1 se libertou\n$roll 10\nplayer2 ganhou\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT boundary\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nroll 4\nroll 3\nshow\nroll 3\nroll 6\nshow\nroll 2\nroll 10\nshow\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 3\nplayer1 andou para 8\nplayer1 caiu em uma armadilha\n$roll 6\nplayer2 se libertou\n$show\nplayer1: ........1..\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 2\nplayer1 se libertou\n$roll 10\nplayer2 ganhou\n$show\nplayer1: ........1..\nplayer2: ..........2\ntraps__: ..x.x...x..\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT game over\ninit 2 10\nshow\naddTrap 2\naddTrap 4\naddTrap 8\nshow\nroll 1\nroll 2\nshow\nroll 4\nroll 3\nshow\nroll 3\nroll 6\nshow\nroll 2\nroll 10\nshow\nroll 1\nend\n======== EXPECT\n$init 2 10\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ...........\n$addTrap 2\n$addTrap 4\n$addTrap 8\n$show\nplayer1: 1..........\nplayer2: 2..........\ntraps__: ..x.x...x..\n$roll 1\nplayer1 andou para 1\n$roll 2\nplayer2 andou para 2\nplayer2 caiu em uma armadilha\n$show\nplayer1: .1.........\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 4\nplayer1 andou para 5\n$roll 3\nplayer2 continua preso\n$show\nplayer1: .....1.....\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 3\nplayer1 andou para 8\nplayer1 caiu em uma armadilha\n$roll 6\nplayer2 se libertou\n$show\nplayer1: ........1..\nplayer2: ..2........\ntraps__: ..x.x...x..\n$roll 2\nplayer1 se libertou\n$roll 10\nplayer2 ganhou\n$show\nplayer1: ........1..\nplayer2: ..........2\ntraps__: ..x.x...x..\n$roll 1\ngame is over\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\n\nfunction main() {\n\n    while (true) {\n        let line = input();\n        console.log(\"$\" + line);\n\n        let args = line.split(\" \");\n        let cmd = args[0];\n        \n        if (cmd == \"end\") {\n            break;\n        }\n        else if (cmd == \"init\") {\n            // let nPlayers = parseInt(args[1]);\n            // let size = parseInt(args[2]);\n        }\n        else if (cmd == \"addTrap\") {\n            // let pos = parseInt(args[1]);\n        }\n        else if (cmd == \"roll\") {\n            // let value = parseInt(args[1]);\n        }\n        else if (cmd == \"show\") {\n        }  \n        else {\n            console.log(\"Comando inv\u00e1lido\");\n        }\n    }\n}\n\nmain()\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.*;\n\n// }\n\npublic class Shell {\n    private static Scanner scanner = new Scanner(System.in);\n    public static void main(String[] args) {\n\n        while (true) {\n            String line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n            \n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"init\")) {\n                // var nPlayers = Integer.parseInt(par[1]);\n                // var size = Integer.parseInt(par[2]);\n            }\n            else if (cmd.equals(\"addTrap\")) {\n                // var pos = Integer.parseInt(par[1]);\n            }\n            else if (cmd.equals(\"roll\")) {\n                // var value = Integer.parseInt(par[1]);\n            }\n            else if (cmd.equals(\"show\")) {\n            }\n            else {\n                System.out.println(\"invalid command\");\n            }\n        }\n        scanner.close();\n    }\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nint main() {\n\n    while(true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"init\") {\n            // int nPlayers, size;\n            // ss >> nPlayers >> size;\n            // board = Board(nPlayers, size);\n        } else if (cmd == \"addTrap\") {\n            // int pos;\n            // ss >> pos;\n            // board.addTrap(pos);\n        } else if (cmd == \"roll\") {\n            // int value;\n            // ss >> value;\n        } else if (cmd == \"show\") {\n        } else {\n            cout << \"fail: command not found\" << endl;\n        }\n\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
