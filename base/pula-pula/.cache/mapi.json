{
    "title": "@pula-pula: Gerenciando entradas e sa\u00eddas do pula pula",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@pula-pula: Gerenciando entradas e sa\u00eddas do pula pula</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Gerenciando entradas e sa\u00eddas do pula pula</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"cover\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/pula-pula/cover.jpg\" /></p>\n<p>Nosso objetivo no trabalho \u00e9 modelar um gestor de pula pulas em um parquinho, controlando as pessoas que entram e saem do pula pula, al\u00e9m de coordenar as pessoas que est\u00e3o na fila de espera.</p>\n<h2>Intro</h2>\n<ul>\n<li>Inserir crian\u00e7as na fila de espera do pula pula</li>\n<li>Mover a primeira crian\u00e7a da fila de espera do pula pula para dentro do pula pula.</li>\n<li>Mover a primeira crian\u00e7a que entrou no pula pula para o final da fila de espera.</li>\n</ul>\n<hr />\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/pula-pula/.cache/draft/cpp/shell.cpp\">shell.cpp</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/pula-pula/.cache/draft/java/Shell.java\">Shell.java</a></li>\n</ul>\n</li>\n<li>ts<ul>\n<li><a href=\"https://github.com/qxcodepoo/arcade/blob/master/base/pula-pula/.cache/draft/ts/shell.ts\">shell.ts</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n\n<h2>Guide</h2>\n<p><img alt=\"diagrama\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/pula-pula/diagrama.png\" /></p>\n<p><a href=\"https://youtu.be/Uu94DgZYa_M?si=AzLR2so6o5CLiZTz\"><img alt=\"youtube icon\" src=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/pula-pula/../youguide.png\" /></a></p>\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE unico</span>\n<span class=\"c1\"># $chegou _nome _idade</span>\n<span class=\"c1\"># insere uma crian\u00e7a na fila de entrada do brinquedo</span>\n<span class=\"nv\">$arrive</span><span class=\"w\"> </span>mario<span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$arrive</span><span class=\"w\"> </span>livia<span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$arrive</span><span class=\"w\"> </span>luana<span class=\"w\"> </span><span class=\"m\">3</span>\n\n<span class=\"c1\"># show</span>\n<span class=\"c1\"># mostra a fila de entrada e o pula pula</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>luana:3,<span class=\"w\"> </span>livia:4,<span class=\"w\"> </span>mario:5<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span><span class=\"o\">[]</span>\n\n<span class=\"c1\">#TEST_CASE entrando</span>\n<span class=\"c1\"># entrar</span>\n<span class=\"c1\"># tira a primeira crian\u00e7a da fila de entrada e insere no pula pula</span>\n\n<span class=\"nv\">$enter</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>luana:3,<span class=\"w\"> </span>livia:4<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span><span class=\"o\">[</span>mario:5<span class=\"o\">]</span>\n\n<span class=\"c1\">#TEST_CASE segunda pessoa</span>\n<span class=\"nv\">$enter</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>luana:3<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span><span class=\"o\">[</span>livia:4,<span class=\"w\"> </span>mario:5<span class=\"o\">]</span>\n\n<span class=\"c1\">#TEST_CASE saindo</span>\n<span class=\"nv\">$leave</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>mario:5,<span class=\"w\"> </span>luana:3<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span><span class=\"o\">[</span>livia:4<span class=\"o\">]</span>\n\n<span class=\"c1\">#TEST_CASE remove</span>\n<span class=\"nv\">$remove</span><span class=\"w\"> </span>luana\n\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>mario:5<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span><span class=\"o\">[</span>livia:4<span class=\"o\">]</span>\n<span class=\"nv\">$remove</span><span class=\"w\"> </span>livia\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>mario:5<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span><span class=\"o\">[]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<hr />\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE 2</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span><span class=\"o\">[]</span>\n<span class=\"nv\">$arrive</span><span class=\"w\"> </span>mario<span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>mario:5<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span><span class=\"o\">[]</span>\n\n<span class=\"c1\">#TEST_CASE empty enter</span>\n<span class=\"nv\">$enter</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span><span class=\"o\">[</span>mario:5<span class=\"o\">]</span>\n\n<span class=\"c1\">#TEST_CASE empty leave</span>\n<span class=\"nv\">$leave</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>mario:5<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span><span class=\"o\">[]</span>\n<span class=\"nv\">$leave</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span>mario:5<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span><span class=\"o\">[]</span>\n\n<span class=\"c1\">#TEST_CASE remove from waiting</span>\n<span class=\"nv\">$remove</span><span class=\"w\"> </span>mario\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span><span class=\"o\">[]</span>\n\n<span class=\"c1\">#TEST_CASE remove empty</span>\n<span class=\"nv\">$remove</span><span class=\"w\"> </span>rebeca\nfail:<span class=\"w\"> </span>rebeca<span class=\"w\"> </span>nao<span class=\"w\"> </span>esta<span class=\"w\"> </span>no<span class=\"w\"> </span>pula-pula\n\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span><span class=\"o\">[]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT unico\narrive mario 5\narrive livia 4\narrive luana 3\nshow\nend\n======== EXPECT\n$arrive mario 5\n$arrive livia 4\n$arrive luana 3\n$show\n[luana:3, livia:4, mario:5] => []\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT entrando\narrive mario 5\narrive livia 4\narrive luana 3\nshow\nenter\nshow\nend\n======== EXPECT\n$arrive mario 5\n$arrive livia 4\n$arrive luana 3\n$show\n[luana:3, livia:4, mario:5] => []\n$enter\n$show\n[luana:3, livia:4] => [mario:5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT segunda pessoa\narrive mario 5\narrive livia 4\narrive luana 3\nshow\nenter\nshow\nenter\nshow\nend\n======== EXPECT\n$arrive mario 5\n$arrive livia 4\n$arrive luana 3\n$show\n[luana:3, livia:4, mario:5] => []\n$enter\n$show\n[luana:3, livia:4] => [mario:5]\n$enter\n$show\n[luana:3] => [livia:4, mario:5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT saindo\narrive mario 5\narrive livia 4\narrive luana 3\nshow\nenter\nshow\nenter\nshow\nleave\nshow\nend\n======== EXPECT\n$arrive mario 5\n$arrive livia 4\n$arrive luana 3\n$show\n[luana:3, livia:4, mario:5] => []\n$enter\n$show\n[luana:3, livia:4] => [mario:5]\n$enter\n$show\n[luana:3] => [livia:4, mario:5]\n$leave\n$show\n[mario:5, luana:3] => [livia:4]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT remove\narrive mario 5\narrive livia 4\narrive luana 3\nshow\nenter\nshow\nenter\nshow\nleave\nshow\nremove luana\nshow\nremove livia\nshow\nend\n======== EXPECT\n$arrive mario 5\n$arrive livia 4\n$arrive luana 3\n$show\n[luana:3, livia:4, mario:5] => []\n$enter\n$show\n[luana:3, livia:4] => [mario:5]\n$enter\n$show\n[luana:3] => [livia:4, mario:5]\n$leave\n$show\n[mario:5, luana:3] => [livia:4]\n$remove luana\n$show\n[mario:5] => [livia:4]\n$remove livia\n$show\n[mario:5] => []\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 2\nshow\narrive mario 5\nshow\nend\n======== EXPECT\n$show\n[] => []\n$arrive mario 5\n$show\n[mario:5] => []\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT empty enter\nshow\narrive mario 5\nshow\nenter\nshow\nend\n======== EXPECT\n$show\n[] => []\n$arrive mario 5\n$show\n[mario:5] => []\n$enter\n$show\n[] => [mario:5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT empty leave\nshow\narrive mario 5\nshow\nenter\nshow\nleave\nshow\nleave\nshow\nend\n======== EXPECT\n$show\n[] => []\n$arrive mario 5\n$show\n[mario:5] => []\n$enter\n$show\n[] => [mario:5]\n$leave\n$show\n[mario:5] => []\n$leave\n$show\n[mario:5] => []\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT remove from waiting\nshow\narrive mario 5\nshow\nenter\nshow\nleave\nshow\nleave\nshow\nremove mario\nshow\nend\n======== EXPECT\n$show\n[] => []\n$arrive mario 5\n$show\n[mario:5] => []\n$enter\n$show\n[] => [mario:5]\n$leave\n$show\n[mario:5] => []\n$leave\n$show\n[mario:5] => []\n$remove mario\n$show\n[] => []\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT remove empty\nshow\narrive mario 5\nshow\nenter\nshow\nleave\nshow\nleave\nshow\nremove mario\nshow\nremove rebeca\nshow\nend\n======== EXPECT\n$show\n[] => []\n$arrive mario 5\n$show\n[mario:5] => []\n$enter\n$show\n[] => [mario:5]\n$leave\n$show\n[mario:5] => []\n$leave\n$show\n[mario:5] => []\n$remove mario\n$show\n[] => []\n$remove rebeca\nfail: rebeca nao esta no pula-pula\n$show\n[] => []\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; // MODO_TESTE\nexport {};\n\n\nfunction main() {\n\n    while (true) {\n        const line = input();\n        console.log(\"$\" + line);\n\n        const par = line.split(\" \");\n        const cmd = par[0];\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"show\") { //TODO\n        } else if (cmd == \"arrive\") {\n            // const name = par[1];\n            // const age = parseInt(par[2]);\n        } else if (cmd == \"enter\") {\n        } else if (cmd == \"leave\") {\n        } else if (cmd == \"remove\") {\n            // const name = par[1];\n        } else {\n            console.log(\"fail: comando invalido\");\n        }\n    }\n}\n\nmain();\n",
                "type": "show"
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\nimport java.util.LinkedList;\n\npublic class Shell {\n    public static void main(String[] args) {\n        while(true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"show\")) { \n            }\n            else if (cmd.equals(\"arrive\")) {\n                // var name = par[1];\n                // var age = Integer.parseInt(par[2]);\n            }\n            else if (cmd.equals(\"enter\")) {\n            }\n            else if (cmd.equals(\"leave\")) {\n            }\n            else if (cmd.equals(\"remove\")) {\n                // var name = par[1];\n            }\n            else {\n                System.out.println(\"fail: comando invalido\");\n            }\n        }\n    }\n\n    private static Scanner scanner = new Scanner(System.in);\n}\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <iostream>\n#include <memory>\n#include <sstream>\n#include <list>\nusing namespace std;\n\ntemplate<class CONTAINER, class FUNC>\nstring map_join(const CONTAINER& c, FUNC f, string sep) {\n    stringstream ss;\n    for (auto it = c.begin(); it != c.end(); it++) {\n        ss << (it == c.begin() ? \"\" : sep);\n        ss << f(*it);\n    }\n    return ss.str();\n}\n\n\nint main() {\n\n    while (true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"show\") {\n        } else if (cmd == \"arrive\") {\n            // string name;\n            // int age;\n            // ss >> name >> age;\n        } else if (cmd == \"enter\") {\n        } else if (cmd == \"leave\") {\n        } else if (cmd == \"remove\") {\n            // string name;\n            // ss >> name;\n        } else {\n            cout << \"fail: comando invalido\" << endl;\n        }\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
